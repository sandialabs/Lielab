#include <Lielab.hpp>
#include <string>
#include <Eigen/Core>
#include <pybind11/pybind11.h>
#include <pybind11/operators.h>
#include <pybind11/functional.h>
#include <pybind11/complex.h>
#include <pybind11/eigen.h>
#include <pybind11/numpy.h>
#include <pybind11/stl.h>

#include "pyfunctions.hpp"

namespace py = pybind11;

std::string matstr(const Eigen::VectorXd &mat);
std::string matstr(const Eigen::VectorXcd &mat);
std::string matstr(const Eigen::MatrixXd &mat);
std::string matstr(const Eigen::MatrixXcd &mat);

void bind_functions(py::module &m_functions)
{
    m_functions.def("left_Lie_group_action", &Lielab::functions::left_Lie_group_action, "Default action by left product.");
    m_functions.def("right_Lie_group_action", &Lielab::functions::right_Lie_group_action, "Action by right product.");
    m_functions.def("left_Lie_algebra_action", &Lielab::functions::left_Lie_algebra_action, "Default daction by left product.");
    m_functions.def("right_Lie_algebra_action", &Lielab::functions::right_Lie_algebra_action, "dAction by right product.");
    // m_functions.def("copair", &Lielab::functions::copair<Lielab::domain::glr>, "The copair function.");
    // m_functions.def("copair", &Lielab::functions::copair<Lielab::domain::rn>, "The copair function.");
    // m_functions.def("copair", &Lielab::functions::copair<Lielab::domain::so>, "The copair function.");
    // m_functions.def("copair", &Lielab::functions::copair<Lielab::domain::sp>, "The copair function.");
    // m_functions.def("copair", &Lielab::functions::copair<Lielab::domain::su>, "The copair function.");
    m_functions.def("Ad_numerical", [](const Lielab::domain::cn & a){return Lielab::functions::Ad_numerical(a);}, py::arg("a"), "The numerical Ad function.");
    m_functions.def("Ad_numerical", [](const Lielab::domain::glr & a){return Lielab::functions::Ad_numerical(a);}, py::arg("a"), "The numerical Ad function.");
    m_functions.def("Ad_numerical", [](const Lielab::domain::glc & a){return Lielab::functions::Ad_numerical(a);}, py::arg("a"), "The numerical Ad function.");
    m_functions.def("Ad_numerical", [](const Lielab::domain::rn & a){return Lielab::functions::Ad_numerical(a);}, py::arg("a"), "The numerical Ad function.");
    m_functions.def("Ad_numerical", [](const Lielab::domain::se & a){return Lielab::functions::Ad_numerical(a);}, py::arg("a"), "The numerical Ad function.");
    m_functions.def("Ad_numerical", [](const Lielab::domain::so & a){return Lielab::functions::Ad_numerical(a);}, py::arg("a"), "The numerical Ad function.");
    m_functions.def("Ad_numerical", [](const Lielab::domain::sp & a){return Lielab::functions::Ad_numerical(a);}, py::arg("a"), "The numerical Ad function.");
    m_functions.def("Ad_numerical", [](const Lielab::domain::su & a){return Lielab::functions::Ad_numerical(a);}, py::arg("a"), "The numerical Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::cn & a){return Lielab::functions::Ad(a);}, py::arg("a"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::glr & a){return Lielab::functions::Ad(a);}, py::arg("a"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::glc & a){return Lielab::functions::Ad(a);}, py::arg("a"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::rn & a){return Lielab::functions::Ad(a);}, py::arg("a"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::se & a){return Lielab::functions::Ad(a);}, py::arg("a"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::so & a){return Lielab::functions::Ad(a);}, py::arg("a"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::sp & a){return Lielab::functions::Ad(a);}, py::arg("a"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::su & a){return Lielab::functions::Ad(a);}, py::arg("a"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::cn & a, Lielab::domain::cn & b){return Lielab::functions::Ad(a, b);}, py::arg("a"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::glr & a, Lielab::domain::glr & b){return Lielab::functions::Ad(a, b);}, py::arg("a"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::glc & a, Lielab::domain::glc & b){return Lielab::functions::Ad(a, b);}, py::arg("a"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::rn & a, Lielab::domain::rn & b){return Lielab::functions::Ad(a, b);}, py::arg("a"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::se & a, Lielab::domain::se & b){return Lielab::functions::Ad(a, b);}, py::arg("a"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::so & a, Lielab::domain::so & b){return Lielab::functions::Ad(a, b);}, py::arg("a"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::sp & a, Lielab::domain::sp & b){return Lielab::functions::Ad(a, b);}, py::arg("a"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::su & a, Lielab::domain::su & b){return Lielab::functions::Ad(a, b);}, py::arg("a"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::CN & A, Lielab::domain::cn & b){return Lielab::functions::Ad(A, b);}, py::arg("A"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::GLR & A, Lielab::domain::glr & b){return Lielab::functions::Ad(A, b);}, py::arg("A"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::GLC & A, Lielab::domain::glc & b){return Lielab::functions::Ad(A, b);}, py::arg("A"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::RN & A, Lielab::domain::rn & b){return Lielab::functions::Ad(A, b);}, py::arg("A"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::SE & A, Lielab::domain::se & b){return Lielab::functions::Ad(A, b);}, py::arg("A"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::SO & A, Lielab::domain::so & b){return Lielab::functions::Ad(A, b);}, py::arg("A"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::SP & A, Lielab::domain::sp & b){return Lielab::functions::Ad(A, b);}, py::arg("A"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::SU & A, Lielab::domain::su & b){return Lielab::functions::Ad(A, b);}, py::arg("A"), py::arg("b"), "The Ad function.");
    m_functions.def("Ad", [](const Lielab::domain::CompositeGroup A, const Lielab::domain::CompositeAlgebra & b){return Lielab::functions::Ad(A, b);}, "The Ad function.", py::arg("A"), py::arg("b"));
    // m_functions.def("Cayley", &Lielab::functions::Cayley<Lielab::domain::cn>, "The Cayley function.");
    // m_functions.def("Cayley", &Lielab::functions::Cayley<Lielab::domain::glr>, "The Cayley function.");
    // m_functions.def("Cayley", &Lielab::functions::Cayley<Lielab::domain::glc>, "The Cayley function.");
    m_functions.def("Cayley", &Lielab::functions::Cayley<Lielab::domain::rn>, "The Cayley function.");
    // m_functions.def("Cayley", &Lielab::functions::Cayley<Lielab::domain::se>, "The Cayley function.");
    m_functions.def("Cayley", &Lielab::functions::Cayley<Lielab::domain::so>, "The Cayley function.");
    m_functions.def("Cayley", &Lielab::functions::Cayley<Lielab::domain::sp>, "The Cayley function.");
    m_functions.def("Cayley", &Lielab::functions::Cayley<Lielab::domain::su>, "The Cayley function.");
    m_functions.def("Cayley", [](Lielab::domain::CompositeAlgebra a){return Lielab::functions::Cayley(a);}, py::arg("a"), "The Cayley function.");
    // m_functions.def("Cayley2", &Lielab::functions::Cayley2<Lielab::domain::cn>, "The Cayley2 function.");
    // m_functions.def("Cayley2", &Lielab::functions::Cayley2<Lielab::domain::glr>, "The Cayley2 function.");
    // m_functions.def("Cayley2", &Lielab::functions::Cayley2<Lielab::domain::glc>, "The Cayley2 function.");
    m_functions.def("Cayley2", &Lielab::functions::Cayley2<Lielab::domain::rn>, "The Cayley2 function.");
    // m_functions.def("Cayley2", &Lielab::functions::Cayley2<Lielab::domain::se>, "The Cayley2 function.");
    m_functions.def("Cayley2", &Lielab::functions::Cayley2<Lielab::domain::so>, "The Cayley2 function.");
    m_functions.def("Cayley2", &Lielab::functions::Cayley2<Lielab::domain::sp>, "The Cayley2 function.");
    // m_functions.def("Cayley2", &Lielab::functions::Cayley2<Lielab::domain::su>, "The Cayley2 function.");
    m_functions.def("commutator", &Lielab::functions::commutator<Lielab::domain::cn>, "The commutator function.");
    m_functions.def("commutator", &Lielab::functions::commutator<Lielab::domain::glr>, "The commutator function.");
    m_functions.def("commutator", &Lielab::functions::commutator<Lielab::domain::glc>, "The commutator function.");
    m_functions.def("commutator", &Lielab::functions::commutator<Lielab::domain::rn>, "The commutator function.");
    m_functions.def("commutator", &Lielab::functions::commutator<Lielab::domain::se>, "The commutator function.");
    m_functions.def("commutator", &Lielab::functions::commutator<Lielab::domain::so>, "The commutator function.");
    m_functions.def("commutator", &Lielab::functions::commutator<Lielab::domain::sp>, "The commutator function.");
    m_functions.def("commutator", &Lielab::functions::commutator<Lielab::domain::su>, "The commutator function.");
    m_functions.def("commutator", &Lielab::functions::commutator<Lielab::domain::CompositeAlgebra>, "The commutator function.");
    // m_functions.def("Killing", &Lielab::functions::Killing<Lielab::domain::cn>, "The Killing function.");
    // m_functions.def("Killing", &Lielab::functions::Killing<Lielab::domain::glr>, "The Killing function.");
    // m_functions.def("Killing", &Lielab::functions::Killing<Lielab::domain::glc>, "The Killing function.");
    m_functions.def("Killing", &Lielab::functions::Killing<Lielab::domain::rn>, "The Killing function.");
    // m_functions.def("Killing", &Lielab::functions::Killing<Lielab::domain::se>, "The Killing function.");
    m_functions.def("Killing", &Lielab::functions::Killing<Lielab::domain::so>, "The Killing function.");
    m_functions.def("Killing", &Lielab::functions::Killing<Lielab::domain::sp>, "The Killing function.");
    m_functions.def("Killing", &Lielab::functions::Killing<Lielab::domain::su>, "The Killing function."); // TODO: Might be wrong
    m_functions.def("Killingform", &Lielab::functions::Killingform<Lielab::domain::cn>, "The Killingform function.");
    m_functions.def("Killingform", &Lielab::functions::Killingform<Lielab::domain::glr>, "The Killingform function.");
    m_functions.def("Killingform", &Lielab::functions::Killingform<Lielab::domain::glc>, "The Killingform function.");
    // m_functions.def("Killingform", &Lielab::functions::Killingform<Lielab::domain::se>, "The Killingform function.");
    m_functions.def("Killingform", &Lielab::functions::Killingform<Lielab::domain::rn>, "The Killingform function.");
    m_functions.def("Killingform", &Lielab::functions::Killingform<Lielab::domain::so>, "The Killingform function.");
    m_functions.def("Killingform", &Lielab::functions::Killingform<Lielab::domain::sp>, "The Killingform function.");
    m_functions.def("Killingform", &Lielab::functions::Killingform<Lielab::domain::su>, "The Killingform function."); // TODO: Might be wrong
    m_functions.def("ad_numerical", [](const Lielab::domain::cn & a, const int p){return Lielab::functions::ad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::cn & a, const Lielab::domain::cn & b, const int p){return Lielab::functions::ad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::glr & a, const int p){return Lielab::functions::ad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::glr & a, const Lielab::domain::glr & b, const int p){return Lielab::functions::ad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::glc & a, const int p){return Lielab::functions::ad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::glc & a, const Lielab::domain::glc & b, const int p){return Lielab::functions::ad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::rn & a, const int p){return Lielab::functions::ad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::rn & a, const Lielab::domain::rn & b, const int p){return Lielab::functions::ad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::se & a, const int p){return Lielab::functions::ad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::se & a, const Lielab::domain::se & b, const int p){return Lielab::functions::ad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::so & a, const int p){return Lielab::functions::ad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::so & a, const Lielab::domain::so & b, const int p){return Lielab::functions::ad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::sp & a, const int p){return Lielab::functions::ad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::sp & a, const Lielab::domain::sp & b, const int p){return Lielab::functions::ad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::su & a, const int p){return Lielab::functions::ad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad_numerical", [](const Lielab::domain::su & a, const Lielab::domain::su & b, const int p){return Lielab::functions::ad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical ad function.");
    m_functions.def("ad", [](const Lielab::domain::cn & a, const int p){return Lielab::functions::ad(a, p);}, py::arg("a"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::cn & a, const Lielab::domain::cn & b, const int p){return Lielab::functions::ad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::glr & a, const int p){return Lielab::functions::ad(a, p);}, py::arg("a"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::glr & a, const Lielab::domain::glr & b, const int p){return Lielab::functions::ad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::glc & a, const int p){return Lielab::functions::ad(a, p);}, py::arg("a"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::glc & a, const Lielab::domain::glc & b, const int p){return Lielab::functions::ad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::rn & a, const int p){return Lielab::functions::ad(a, p);}, py::arg("a"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::rn & a, const Lielab::domain::rn & b, const int p){return Lielab::functions::ad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::se & a, const int p){return Lielab::functions::ad(a, p);}, py::arg("a"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::se & a, const Lielab::domain::se & b, const int p){return Lielab::functions::ad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::so & a, const int p){return Lielab::functions::ad(a, p);}, py::arg("a"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::so & a, const Lielab::domain::so & b, const int p){return Lielab::functions::ad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::sp & a, const int p){return Lielab::functions::ad(a, p);}, py::arg("a"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::sp & a, const Lielab::domain::sp & b, const int p){return Lielab::functions::ad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::su & a, const int p){return Lielab::functions::ad(a, p);}, py::arg("a"), py::arg("p") = 1, "The ad function.");
    m_functions.def("ad", [](const Lielab::domain::su & a, const Lielab::domain::su & b, const int p){return Lielab::functions::ad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The ad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::cn & a, const int p){return Lielab::functions::coad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::cn & a, const Lielab::domain::cn & b, const int p){return Lielab::functions::coad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::glr & a, const int p){return Lielab::functions::coad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::glr & a, const Lielab::domain::glr & b, const int p){return Lielab::functions::coad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::glc & a, const int p){return Lielab::functions::coad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::glc & a, const Lielab::domain::glc & b, const int p){return Lielab::functions::coad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::rn & a, const int p){return Lielab::functions::coad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::rn & a, const Lielab::domain::rn & b, const int p){return Lielab::functions::coad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::se & a, const int p){return Lielab::functions::coad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::se & a, const Lielab::domain::se & b, const int p){return Lielab::functions::coad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::so & a, const int p){return Lielab::functions::coad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::so & a, const Lielab::domain::so & b, const int p){return Lielab::functions::coad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::sp & a, const int p){return Lielab::functions::coad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::sp & a, const Lielab::domain::sp & b, const int p){return Lielab::functions::coad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::su & a, const int p){return Lielab::functions::coad_numerical(a, p);}, py::arg("a"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad_numerical", [](const Lielab::domain::su & a, const Lielab::domain::su & b, const int p){return Lielab::functions::coad_numerical(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The numerical coad function.");
    m_functions.def("coad", [](const Lielab::domain::cn & a, const int p){return Lielab::functions::coad(a, p);}, py::arg("a"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::cn & a, const Lielab::domain::cn & b, const int p){return Lielab::functions::coad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::glr & a, const int p){return Lielab::functions::coad(a, p);}, py::arg("a"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::glr & a, const Lielab::domain::glr & b, const int p){return Lielab::functions::coad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::glc & a, const int p){return Lielab::functions::coad(a, p);}, py::arg("a"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::glc & a, const Lielab::domain::glc & b, const int p){return Lielab::functions::coad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::rn & a, const int p){return Lielab::functions::coad(a, p);}, py::arg("a"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::rn & a, const Lielab::domain::rn & b, const int p){return Lielab::functions::coad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::se & a, const int p){return Lielab::functions::coad(a, p);}, py::arg("a"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::se & a, const Lielab::domain::se & b, const int p){return Lielab::functions::coad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::so & a, const int p){return Lielab::functions::coad(a, p);}, py::arg("a"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::so & a, const Lielab::domain::so & b, const int p){return Lielab::functions::coad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::sp & a, const int p){return Lielab::functions::coad(a, p);}, py::arg("a"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::sp & a, const Lielab::domain::sp & b, const int p){return Lielab::functions::coad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::su & a, const int p){return Lielab::functions::coad(a, p);}, py::arg("a"), py::arg("p") = 1, "The coad function.");
    m_functions.def("coad", [](const Lielab::domain::su & a, const Lielab::domain::su & b, const int p){return Lielab::functions::coad(a, b, p);}, py::arg("a"), py::arg("b"), py::arg("p") = 1, "The coad function.");
    m_functions.def("exp_numerical", &Lielab::functions::exp_numerical<Lielab::domain::cn>, "The numerical exponential function.");
    m_functions.def("exp_numerical", &Lielab::functions::exp_numerical<Lielab::domain::glr>, "The numerical exponential function.");
    m_functions.def("exp_numerical", &Lielab::functions::exp_numerical<Lielab::domain::glc>, "The numerical exponential function.");
    m_functions.def("exp_numerical", &Lielab::functions::exp_numerical<Lielab::domain::rn>, "The numerical exponential function.");
    m_functions.def("exp_numerical", &Lielab::functions::exp_numerical<Lielab::domain::se>, "The numerical exponential function.");
    m_functions.def("exp_numerical", &Lielab::functions::exp_numerical<Lielab::domain::so>, "The numerical exponential function.");
    m_functions.def("exp_numerical", &Lielab::functions::exp_numerical<Lielab::domain::sp>, "The numerical exponential function.");
    m_functions.def("exp_numerical", &Lielab::functions::exp_numerical<Lielab::domain::su>, "The numerical exponential function.");
    m_functions.def("exp", &Lielab::functions::exp<Lielab::domain::cn>, "The exponential function.");
    m_functions.def("exp", &Lielab::functions::exp<Lielab::domain::glr>, "The exponential function.");
    m_functions.def("exp", &Lielab::functions::exp<Lielab::domain::glc>, "The exponential function.");
    m_functions.def("exp", &Lielab::functions::exp<Lielab::domain::rn>, "The exponential function.");
    m_functions.def("exp", &Lielab::functions::exp<Lielab::domain::se>, "The exponential function.");
    m_functions.def("exp", &Lielab::functions::exp<Lielab::domain::so>, "The exponential function.");
    m_functions.def("exp", &Lielab::functions::exp<Lielab::domain::sp>, "The exponential function.");
    m_functions.def("exp", &Lielab::functions::exp<Lielab::domain::su>, "The exponential function.");
    m_functions.def("exp", [](const Lielab::domain::CompositeAlgebra & a){return Lielab::functions::exp(a);}, "The exponential function.");
    m_functions.def("log_numerical", &Lielab::functions::log_numerical<Lielab::domain::CN>, "The numerical logarithm function.");
    m_functions.def("log_numerical", &Lielab::functions::log_numerical<Lielab::domain::GLR>, "The numerical logarithm function.");
    m_functions.def("log_numerical", &Lielab::functions::log_numerical<Lielab::domain::GLC>, "The numerical logarithm function.");
    m_functions.def("log_numerical", &Lielab::functions::log_numerical<Lielab::domain::RN>, "The numerical logarithm function.");
    m_functions.def("log_numerical", &Lielab::functions::log_numerical<Lielab::domain::SE>, "The numerical logarithm function.");
    m_functions.def("log_numerical", &Lielab::functions::log_numerical<Lielab::domain::SO>, "The numerical logarithm function.");
    m_functions.def("log_numerical", &Lielab::functions::log_numerical<Lielab::domain::SP>, "The numerical logarithm function.");
    m_functions.def("log_numerical", &Lielab::functions::log_numerical<Lielab::domain::SU>, "The numerical logarithm function.");
    m_functions.def("log", &Lielab::functions::log<Lielab::domain::CN>, "The logarithm function.", py::arg("G"));
    m_functions.def("log", &Lielab::functions::log<Lielab::domain::GLR>, "The logarithm function.", py::arg("G"));
    m_functions.def("log", &Lielab::functions::log<Lielab::domain::GLC>, "The logarithm function.", py::arg("G"));
    m_functions.def("log", &Lielab::functions::log<Lielab::domain::RN>, "The logarithm function.", py::arg("G"));
    m_functions.def("log", &Lielab::functions::log<Lielab::domain::SE>, "The logarithm function.", py::arg("G"));
    m_functions.def("log", &Lielab::functions::log<Lielab::domain::SO>, "The logarithm function.", py::arg("G"));
    m_functions.def("log", &Lielab::functions::log<Lielab::domain::SP>, "The logarithm function.", py::arg("G"));
    m_functions.def("log", &Lielab::functions::log<Lielab::domain::SU>, "The logarithm function.", py::arg("G"));
    m_functions.def("log", [](Lielab::domain::CompositeGroup A){return Lielab::functions::log(A);}, py::arg("A"), "The logarithm function.");
    m_functions.def("bernoulli", &Lielab::functions::bernoulli, "The bernoulli function.");
    // m_functions.def("dCayleyinv", &Lielab::functions::dCayleyinv<Lielab::domain::cn>, "The dCayleyinv function.");
    m_functions.def("dCayleyinv", &Lielab::functions::dCayleyinv<Lielab::domain::glr>, "The dCayleyinv function.");
    // m_functions.def("dCayleyinv", &Lielab::functions::dCayleyinv<Lielab::domain::glc>, "The dCayleyinv function.");
    m_functions.def("dCayleyinv", &Lielab::functions::dCayleyinv<Lielab::domain::rn>, "The dCayleyinv function.");
    // m_functions.def("dCayleyinv", &Lielab::functions::dCayleyinv<Lielab::domain::se>, "The dCayleyinv function.");
    m_functions.def("dCayleyinv", &Lielab::functions::dCayleyinv<Lielab::domain::so>, "The dCayleyinv function.");
    m_functions.def("dCayleyinv", &Lielab::functions::dCayleyinv<Lielab::domain::sp>, "The dCayleyinv function.");
    m_functions.def("dCayleyinv", &Lielab::functions::dCayleyinv<Lielab::domain::su>, "The dCayleyinv function.");
    m_functions.def("dCayleyinv", [](const Lielab::domain::CompositeAlgebra & a, const Lielab::domain::CompositeAlgebra & b){return Lielab::functions::dCayleyinv(a, b);}, "The dCayleyinv function.");
    m_functions.def("dexp_numerical", [](const Lielab::domain::cn & a, const size_t order){return Lielab::functions::dexp_numerical(a, order);}, "The numerical dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::cn & a, const Lielab::domain::cn & b, const size_t order){return Lielab::functions::dexp_numerical(a, b, order);}, "The numerical dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::glr & a, const size_t order){return Lielab::functions::dexp_numerical(a, order);}, "The numerical dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::glr & a, const Lielab::domain::glr & b, const size_t order){return Lielab::functions::dexp_numerical(a, b, order);}, "The numerical dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::glc & a, const size_t order){return Lielab::functions::dexp_numerical(a, order);}, "The numerical dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::glc & a, const Lielab::domain::glc & b, const size_t order){return Lielab::functions::dexp_numerical(a, b, order);}, "The numerical dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::rn & a, const size_t order){return Lielab::functions::dexp_numerical(a, order);}, "The numerical dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::rn & a, const Lielab::domain::rn & b, const size_t order){return Lielab::functions::dexp_numerical(a, b, order);}, "The numerical dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::se & a, const size_t order){return Lielab::functions::dexp_numerical(a, order);}, "The numerical dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::se & a, const Lielab::domain::se & b, const size_t order){return Lielab::functions::dexp_numerical(a, b, order);}, "The numerical dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::so & a, const size_t order){return Lielab::functions::dexp_numerical(a, order);}, "The numerical dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::so & a, const Lielab::domain::so & b, const size_t order){return Lielab::functions::dexp_numerical(a, b, order);}, "The numerical dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::sp & a, const size_t order){return Lielab::functions::dexp_numerical(a, order);}, "The numerical dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::sp & a, const Lielab::domain::sp & b, const size_t order){return Lielab::functions::dexp_numerical(a, b, order);}, "The numerical dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::su & a, const size_t order){return Lielab::functions::dexp_numerical(a, order);}, "The numerical dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp_numerical", [](const Lielab::domain::su & a, const Lielab::domain::su & b, const size_t order){return Lielab::functions::dexp_numerical(a, b, order);}, "The numerical dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::cn & a, const size_t order){return Lielab::functions::dexp(a, order);}, "The dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::cn & a, const Lielab::domain::cn & b, const size_t order){return Lielab::functions::dexp(a, b, order);}, "The dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::glr & a, const size_t order){return Lielab::functions::dexp(a, order);}, "The dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::glr & a, const Lielab::domain::glr & b, const size_t order){return Lielab::functions::dexp(a, b, order);}, "The dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::glc & a, const size_t order){return Lielab::functions::dexp(a, order);}, "The dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::glc & a, const Lielab::domain::glc & b, const size_t order){return Lielab::functions::dexp(a, b, order);}, "The dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::rn & a, const size_t order){return Lielab::functions::dexp(a, order);}, "The dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::rn & a, const Lielab::domain::rn & b, const size_t order){return Lielab::functions::dexp(a, b, order);}, "The dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::se & a, const size_t order){return Lielab::functions::dexp(a, order);}, "The dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::se & a, const Lielab::domain::se & b, const size_t order){return Lielab::functions::dexp(a, b, order);}, "The dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::so & a, const size_t order){return Lielab::functions::dexp(a, order);}, "The dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::so & a, const Lielab::domain::so & b, const size_t order){return Lielab::functions::dexp(a, b, order);}, "The dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::sp & a, const size_t order){return Lielab::functions::dexp(a, order);}, "The dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::sp & a, const Lielab::domain::sp & b, const size_t order){return Lielab::functions::dexp(a, b, order);}, "The dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::su & a, const size_t order){return Lielab::functions::dexp(a, order);}, "The dexp function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::su & a, const Lielab::domain::su & b, const size_t order){return Lielab::functions::dexp(a, b, order);}, "The dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexp", [](const Lielab::domain::CompositeAlgebra a, const Lielab::domain::CompositeAlgebra & b, const size_t order){return Lielab::functions::dexp(a, b, order);}, "The dexp function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::cn & a, const size_t order){return Lielab::functions::dexpinv_numerical(a, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::cn & a, const Lielab::domain::cn & b, const size_t order){return Lielab::functions::dexpinv_numerical(a, b, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::glr & a, const size_t order){return Lielab::functions::dexpinv_numerical(a, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::glr & a, const Lielab::domain::glr & b, const size_t order){return Lielab::functions::dexpinv_numerical(a, b, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::glc & a, const size_t order){return Lielab::functions::dexpinv_numerical(a, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::glc & a, const Lielab::domain::glc & b, const size_t order){return Lielab::functions::dexpinv_numerical(a, b, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::rn & a, const size_t order){return Lielab::functions::dexpinv_numerical(a, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::rn & a, const Lielab::domain::rn & b, const size_t order){return Lielab::functions::dexpinv_numerical(a, b, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::se & a, const size_t order){return Lielab::functions::dexpinv_numerical(a, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::se & a, const Lielab::domain::se & b, const size_t order){return Lielab::functions::dexpinv_numerical(a, b, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::so & a, const size_t order){return Lielab::functions::dexpinv_numerical(a, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::so & a, const Lielab::domain::so & b, const size_t order){return Lielab::functions::dexpinv_numerical(a, b, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::sp & a, const size_t order){return Lielab::functions::dexpinv_numerical(a, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::sp & a, const Lielab::domain::sp & b, const size_t order){return Lielab::functions::dexpinv_numerical(a, b, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::su & a, const size_t order){return Lielab::functions::dexpinv_numerical(a, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv_numerical", [](const Lielab::domain::su & a, const Lielab::domain::su & b, const size_t order){return Lielab::functions::dexpinv_numerical(a, b, order);}, "The numerical dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::cn & a, const size_t order){return Lielab::functions::dexpinv(a, order);}, "The dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::cn & a, const Lielab::domain::cn & b, const size_t order){return Lielab::functions::dexpinv(a, b, order);}, "The dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::glr & a, const size_t order){return Lielab::functions::dexpinv(a, order);}, "The dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::glr & a, const Lielab::domain::glr & b, const size_t order){return Lielab::functions::dexpinv(a, b, order);}, "The dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::glc & a, const size_t order){return Lielab::functions::dexpinv(a, order);}, "The dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::glc & a, const Lielab::domain::glc & b, const size_t order){return Lielab::functions::dexpinv(a, b, order);}, "The dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::rn & a, const size_t order){return Lielab::functions::dexpinv(a, order);}, "The dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::rn & a, const Lielab::domain::rn & b, const size_t order){return Lielab::functions::dexpinv(a, b, order);}, "The dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::se & a, const size_t order){return Lielab::functions::dexpinv(a, order);}, "The dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::se & a, const Lielab::domain::se & b, const size_t order){return Lielab::functions::dexpinv(a, b, order);}, "The dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::so & a, const size_t order){return Lielab::functions::dexpinv(a, order);}, "The dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::so & a, const Lielab::domain::so & b, const size_t order){return Lielab::functions::dexpinv(a, b, order);}, "The dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::sp & a, const size_t order){return Lielab::functions::dexpinv(a, order);}, "The dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::sp & a, const Lielab::domain::sp & b, const size_t order){return Lielab::functions::dexpinv(a, b, order);}, "The dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::su & a, const size_t order){return Lielab::functions::dexpinv(a, order);}, "The dexpinv function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::su & a, const Lielab::domain::su & b, const size_t order){return Lielab::functions::dexpinv(a, b, order);}, "The dexpinv function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dexpinv", [](const Lielab::domain::CompositeAlgebra & a, const Lielab::domain::CompositeAlgebra & b){return Lielab::functions::dexpinv(a, b);}, "The dexpinv function.");
    m_functions.def("dlog_numerical", [](const Lielab::domain::cn & a, const size_t order){return Lielab::functions::dlog_numerical(a, order);}, "The numerical dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::cn & a, const Lielab::domain::cn & b, const size_t order){return Lielab::functions::dlog_numerical(a, b, order);}, "The numerical dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::glr & a, const size_t order){return Lielab::functions::dlog_numerical(a, order);}, "The numerical dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::glr & a, const Lielab::domain::glr & b, const size_t order){return Lielab::functions::dlog_numerical(a, b, order);}, "The numerical dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::glc & a, const size_t order){return Lielab::functions::dlog_numerical(a, order);}, "The numerical dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::glc & a, const Lielab::domain::glc & b, const size_t order){return Lielab::functions::dlog_numerical(a, b, order);}, "The numerical dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::rn & a, const size_t order){return Lielab::functions::dlog_numerical(a, order);}, "The numerical dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::rn & a, const Lielab::domain::rn & b, const size_t order){return Lielab::functions::dlog_numerical(a, b, order);}, "The numerical dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::se & a, const size_t order){return Lielab::functions::dlog_numerical(a, order);}, "The numerical dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::se & a, const Lielab::domain::se & b, const size_t order){return Lielab::functions::dlog_numerical(a, b, order);}, "The numerical dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::so & a, const size_t order){return Lielab::functions::dlog_numerical(a, order);}, "The numerical dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::so & a, const Lielab::domain::so & b, const size_t order){return Lielab::functions::dlog_numerical(a, b, order);}, "The numerical dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::sp & a, const size_t order){return Lielab::functions::dlog_numerical(a, order);}, "The numerical dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::sp & a, const Lielab::domain::sp & b, const size_t order){return Lielab::functions::dlog_numerical(a, b, order);}, "The numerical dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::su & a, const size_t order){return Lielab::functions::dlog_numerical(a, order);}, "The numerical dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog_numerical", [](const Lielab::domain::su & a, const Lielab::domain::su & b, const size_t order){return Lielab::functions::dlog_numerical(a, b, order);}, "The numerical dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::cn & a, const size_t order){return Lielab::functions::dlog(a, order);}, "The dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::cn & a, const Lielab::domain::cn & b, const size_t order){return Lielab::functions::dlog(a, b, order);}, "The dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::glr & a, const size_t order){return Lielab::functions::dlog(a, order);}, "The dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::glr & a, const Lielab::domain::glr & b, const size_t order){return Lielab::functions::dlog(a, b, order);}, "The dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::glc & a, const size_t order){return Lielab::functions::dlog(a, order);}, "The dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::glc & a, const Lielab::domain::glc & b, const size_t order){return Lielab::functions::dlog(a, b, order);}, "The dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::rn & a, const size_t order){return Lielab::functions::dlog(a, order);}, "The dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::rn & a, const Lielab::domain::rn & b, const size_t order){return Lielab::functions::dlog(a, b, order);}, "The dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::se & a, const size_t order){return Lielab::functions::dlog(a, order);}, "The dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::se & a, const Lielab::domain::se & b, const size_t order){return Lielab::functions::dlog(a, b, order);}, "The dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::so & a, const size_t order){return Lielab::functions::dlog(a, order);}, "The dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::so & a, const Lielab::domain::so & b, const size_t order){return Lielab::functions::dlog(a, b, order);}, "The dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::sp & a, const size_t order){return Lielab::functions::dlog(a, order);}, "The dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::sp & a, const Lielab::domain::sp & b, const size_t order){return Lielab::functions::dlog(a, b, order);}, "The dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::su & a, const size_t order){return Lielab::functions::dlog(a, order);}, "The dlog function.", py::arg("a"), py::arg("order") = 5);
    m_functions.def("dlog", [](const Lielab::domain::su & a, const Lielab::domain::su & b, const size_t order){return Lielab::functions::dlog(a, b, order);}, "The dlog function.", py::arg("a"), py::arg("b"), py::arg("order") = 5);
    m_functions.def("pair", &Lielab::functions::pair<Lielab::domain::cn>, "The pair function.");
    m_functions.def("pair", &Lielab::functions::pair<Lielab::domain::glr>, "The pair function.");
    m_functions.def("pair", &Lielab::functions::pair<Lielab::domain::glc>, "The pair function.");
    m_functions.def("pair", &Lielab::functions::pair<Lielab::domain::rn>, "The pair function.");
    m_functions.def("pair", &Lielab::functions::pair<Lielab::domain::se>, "The pair function.");
    m_functions.def("pair", &Lielab::functions::pair<Lielab::domain::so>, "The pair function.");
    m_functions.def("pair", &Lielab::functions::pair<Lielab::domain::sp>, "The pair function.");
    m_functions.def("pair", &Lielab::functions::pair<Lielab::domain::su>, "The pair function.");
}
