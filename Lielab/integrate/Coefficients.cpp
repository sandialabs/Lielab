#include "Coefficients.hpp"

#include <Eigen/Core>

#include <array>
#include <tuple>

namespace Lielab::integrate
{

std::tuple<Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::VectorXd, int, int, bool> get_butcher_tableau(const Coefficients method)
{
    /*
     * Returns Butcher tableau for a given method.
     *
     * @param(out) (A, b, bhat, c, e, order, stages, variable)
     */

    Eigen::MatrixXd A = Eigen::MatrixXd::Zero(0,0);
    Eigen::VectorXd b = Eigen::VectorXd::Zero(0);
    Eigen::VectorXd bhat = Eigen::VectorXd::Zero(0);
    Eigen::VectorXd c = Eigen::VectorXd::Zero(0);
    int order = 0;
    int stages = 0;
    bool variable = false;

    if (method == Coefficients::E1)
    {
        // Forward Euler
        // Source: 
        
        stages = 1;
        order = 1;
        variable = false;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0;
        b << 1.0;
        bhat << 0.0;
        c << 0.0;
    }
    else if (method == Coefficients::RK3)
    {
        // Kutta's 3rd order method.
        // Source: Kutta, Wilhelm. Beitrag zur näherungsweisen Integration totaler Differentialgleichungen. Teubner, 1901.
        
        stages = 3;
        order = 3;
        variable = false;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,      0.0,  0.0,
             1.0/2.0,  0.0,  0.0,
            -1.0,      2.0,  0.0;
        b << 1.0/6.0, 2.0/3.0, 1.0/6.0;
        bhat << 0.0, 0.0, 0.0;
        c << 0.0, 1.0/2.0, 1.0;
    }
    else if (method == Coefficients::RK4a)
    {
        // Kutta's 4th order method (type a)
        // Source: Kutta, Wilhelm. Beitrag zur näherungsweisen Integration totaler Differentialgleichungen. Teubner, 1901.
        
        stages = 4;
        order = 4;
        variable = false;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,      0.0,      0.0, 0.0,
             1.0/2.0,  0.0,      0.0, 0.0,
             0.0,      1.0/2.0,  0.0, 0.0,
             0.0,      0.0,      1.0, 0.0;
        b << 1.0/6.0, 1.0/3.0, 1.0/3.0, 1.0/6.0;
        bhat << 0.0, 0.0, 0.0, 0.0;
        c << 0.0, 1.0/2.0, 1.0/2.0, 1.0;
    }
    else if (method == Coefficients::RK4b)
    {
        // Kutta's 4th order method (type b)
        // Source: Kutta, Wilhelm. Beitrag zur näherungsweisen Integration totaler Differentialgleichungen. Teubner, 1901.
        
        stages = 4;
        order = 4;
        variable = false;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,      0.0,  0.0, 0.0,
             1.0/3.0,  0.0,  0.0, 0.0,
            -1.0/3.0,  1.0,  0.0, 0.0,
             1.0,     -1.0,  1.0, 0.0;
        b << 1.0/8.0, 3.0/8.0, 3.0/8.0, 1.0/8.0;
        bhat << 0.0, 0.0, 0.0, 0.0;
        c << 0.0, 1.0/3.0, 2.0/3.0, 1.0;
    }
    else if (method == Coefficients::RK5a)
    {
        // Kutta's 5th order method (type a)
        // Source: Fehlberg, Erwin. "Classical Fifth-, Sixth-, Seventh-, and Eighth-Order Runge-Kutta Formulas with Stepsize Control." NASA Technical Report R-287 (1968).
        // Table 3
        
        stages = 6;
        order = 5;
        variable = false;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,         0.0,      0.0,        0.0,       0.0,  0.0,
             1.0/5.0,     0.0,      0.0,        0.0,       0.0,  0.0,
             0.0,         2.0/5.0,  0.0,        0.0,       0.0,  0.0,
             9.0/4.0,    -5.0,      15.0/4.0,   0.0,       0.0,  0.0,
            -63.0/100.0,  9.0/5.0, -13.0/20.0,  2.0/25.0,  0.0,  0.0,
            -6.0/25.0,    4.0/5.0,  2.0/15.0,   8.0/75.0,  0.0,  0.0;
        b << 17.0/144.0, 0.0, 25.0/36.0, 1.0/72.0, -25.0/72.0, 25.0/48.0;
        bhat << 0.0, 0.0, 0.0, 0.0, 0.0, 0.0;
        c << 0.0, 1.0/5.0, 2.0/5.0, 1.0, 3.0/5.0, 4.0/5.0;
    }
    else if (method == Coefficients::RK5b)
    {
        // Kutta's 5th order method (type b)
        // Source: Fehlberg, Erwin. "Classical Fifth-, Sixth-, Seventh-, and Eighth-Order Runge-Kutta Formulas with Stepsize Control." NASA Technical Report R-287 (1968).
        // Table 5
        
        stages = 6;
        order = 5;
        variable = false;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,         0.0,        0.0,        0.0,       0.0,  0.0,
             1.0/3.0,     0.0,        0.0,        0.0,       0.0,  0.0,
             4.0/25.0,    6.0/25.0,   0.0,        0.0,       0.0,  0.0,
             1.0/4.0,    -3.0,        15.0/4.0,   0.0,       0.0,  0.0,
             2.0/27.0,    10.0/9.0,  -50.0/81.0,  8.0/81.0,  0.0,  0.0,
             2.0/25.0,    12.0/25.0,  2.0/15.0,   8.0/75.0,  0.0,  0.0;
        b << 23.0/192.0, 0.0, 125.0/192.0, 0.0, -27.0/64.0, 125.0/192.0;
        bhat << 0.0, 0.0, 0.0, 0.0, 0.0, 0.0;
        c << 0.0, 1.0/3.0, 2.0/5.0, 1.0, 2.0/3.0, 4.0/5.0;
    }
    else if (method == Coefficients::RKF12a)
    {
        // Fehlberg's 1(2) (Type a)
        // Source: Fehlberg, Erwin. "Low-order classical Runge-Kutta formulas with stepsize control." NASA Technical Report R-315 (1969).
        // Table 14

        stages = 3;
        order = 1;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,        0.0,          0.0,
             1.0/2.0,    0.0,          0.0,
             1.0/256.0,  255.0/256.0,  0.0;
        b << 1.0/256.0, 255.0/256.0, 0.0; // 1
        bhat << 1.0/512.0, 255.0/256.0, 1.0/512.0; // 2
        c << 0.0, 1.0/2.0, 1.0;
    }
    else if (method == Coefficients::RKF12b)
    {
        // Fehlberg's 1(2) (Type b) "Euler-Cauchy"
        // Source: Fehlberg, Erwin. "Low-order classical Runge-Kutta formulas with stepsize control." NASA Technical Report R-315 (1969).
        // Table 15

        stages = 2;
        order = 1;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,  0.0,
             1.0,  0.0;
        b << 1.0, 0.0; // 1
        bhat << 1.0/2.0, 1.0/2.0; // 2
        c << 0.0, 1.0;
    }
    else if (method == Coefficients::RKF23a)
    {
        // Fehlberg's 2(3) (Type a)
        // Source: Fehlberg, Erwin. "Low-order classical Runge-Kutta formulas with stepsize control." NASA Technical Report R-315 (1969).
        // Table 11

        stages = 4;
        order = 2;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,          0.0,          0.0,          0.0,
             1.0/4.0,      0.0,          0.0,          0.0,
            -189.0/800.0,  729.0/800.0,  0.0,          0.0,
             214.0/891.0,  1.0/33.0,     650.0/891.0,  0.0;
        b << 214.0/891.0, 1.0/33.0, 650.0/891.0, 0.0; // 2
        bhat << 533.0/2106.0, 0.0, 800.0/1053.0, -1.0/78.0; // 3
        c << 0.0, 1.0/4.0, 27.0/40.0, 1.0;
    }
    else if (method == Coefficients::RKF23b)
    {
        // Fehlberg's 2(3) (Type b)
        // Source: Fehlberg, Erwin. "Low-order classical Runge-Kutta formulas with stepsize control." NASA Technical Report R-315 (1969).
        // Table 12

        stages = 3;
        order = 2;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,      0.0,      0.0,
             1.0,      0.0,      0.0,
             1.0/4.0,  1.0/4.0,  0.0;
        b << 1.0/2.0, 1.0/2.0, 0.0; // 2
        bhat << 1.0/6.0, 1.0/6.0, 2.0/3.0; // 3
        c << 0.0, 1.0, 1.0/2.0;
    }
    else if (method == Coefficients::RKF34a)
    {
        // Fehlberg's 3(4) (Type a)
        // Source: Fehlberg, Erwin. "Low-order classical Runge-Kutta formulas with stepsize control." NASA Technical Report R-315 (1969).
        // Table 7

        stages = 5;
        order = 3;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,        0.0,          0.0,           0.0,         0.0,
             1.0/4.0,    0.0,          0.0,           0.0,         0.0,
             4.0/81.0,   32.0/81.0,    0.0,           0.0,         0.0,
             57.0/98.0, -432.0/343.0,  1053.0/686.0,  0.0,         0.0,
             1.0/6.0,    0.0,          27.0/52.0,     49.0/156.0,  0.0;
        b << 1.0/6.0, 0.0, 27.0/52.0, 49.0/156.0, 0.0; // 3
        bhat << 43.0/288.0, 0.0, 243.0/416.0, 343.0/1872.0, 1.0/12.0; // 4
        c << 0, 1.0/4.0, 4.0/9.0, 6.0/7.0, 1.0;
    }
    else if (method == Coefficients::RKF34b)
    {
        // Fehlberg's 3(4) (Type b)
        // Source: Fehlberg, Erwin. "Low-order classical Runge-Kutta formulas with stepsize control." NASA Technical Report R-315 (1969).
        // Table 8

        stages = 5;
        order = 3;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,           0.0,              0.0,              0.0,            0.0,
             2.0/7.0,       0.0,              0.0,              0.0,            0.0,
             77.0/900.0,    343.0/900.0,      0.0,              0.0,            0.0,
             805.0/1444.0, -77175.0/54872.0,  97125.0/54872.0,  0.0,            0.0,
             79.0/490.0,    0.0,              2175.0/3626.0,    2166.0/9065.0,  0.0;
        b << 79.0/490.0, 0.0, 2175.0/3626.0,  2166.0/9065.0, 0.0; // 3
        bhat << 229.0/1470.0, 0.0, 1125.0/1813.0, 13718.0/81585.0, 1.0/18.0; // 4
        c << 0, 2.0/7.0, 7.0/15.0, 35.0/38.0, 1.0;
    }
    else if (method == Coefficients::RKF45a)
    {
        // Fehlberg's 4(5) (Type a)
        // Source: Fehlberg, Erwin. "Low-order classical Runge-Kutta formulas with stepsize control." NASA Technical Report R-315 (1969).
        // Table 2

        stages = 6;
        order = 4;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,         0.0,          0.0,         0.0,        0.0,        0.0,
             2.0/9.0,     0.0,          0.0,         0.0,        0.0,        0.0,
             1.0/12.0,    1.0/4.0,      0.0,         0.0,        0.0,        0.0,
             69.0/128.0, -243.0/128.0,  135.0/64.0,  0.0,        0.0,        0.0,
            -17.0/12.0,   27.0/4.0,    -27.0/5.0,    16.0/15.0,  0.0,        0.0,
             65.0/432.0, -5.0/16.0,     13.0/16.0,   4.0/27.0,   5.0/144.0,  0.0;
        b << 1.0/9.0, 0.0, 9.0/20.0, 16.0/45.0, 1.0/12.0, 0.0; // 4
        bhat << 47.0/450.0, 0.0, 12.0/25.0, 32.0/225.0, 1.0/30.0, 6.0/25.0; // 5
        c << 0.0, 2.0/9.0, 1.0/3.0, 3.0/4.0, 1.0, 5.0/6.0;
    }
    else if (method == Coefficients::RKF45b)
    {
        // Fehlberg's 4(5) (Type b)
        // Source: Fehlberg, Erwin. "Low-order classical Runge-Kutta formulas with stepsize control." NASA Technical Report R-315 (1969).
        // Table 3

        stages = 6;
        order = 4;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,            0.0,            0.0,            0.0,            0.0,        0.0,
             1.0/4.0,        0.0,            0.0,            0.0,            0.0,        0.0,
             3.0/32.0,       9.0/32.0,       0.0,            0.0,            0.0,        0.0,
             1932.0/2197.0, -7200.0/2197.0,  7296.0/2197.0,  0.0,            0.0,        0.0,
             439.0/216.0,   -8.0,            3680.0/513.0,  -845.0/4104.0,   0.0,        0.0,
            -8.0/27.0,       2.0,           -3544.0/2565.0,  1859.0/4104.0, -11.0/40.0,  0.0;
        b << 25.0/216.0, 0.0, 1408.0/2565.0, 2197.0/4104.0, -1.0/5.0, 0.0; // 4
        bhat << 16.0/135.0, 0.0, 6656.0/12825.0, 28561.0/56430.0, -9.0/50.0, 2.0/55.0; // 5
        c << 0.0, 1.0/4.0, 3.0/8.0, 12.0/13.0, 1.0, 1.0/2.0;
    }
    else if (method == Coefficients::RKF56)
    {
        // Fehlberg's 5(6)
        // Source: Fehlberg, Erwin. "Classical Fifth-, Sixth-, Seventh-, and Eighth-Order Runge-Kutta Formulas with Stepsize Control." NASA Technical Report R-287 (1968).
        // Table 2

        stages = 8;
        order = 5;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,          0.0,         0.0,          0.0,         0.0,         0.0,  0.0,  0.0,
             1.0/6.0,      0.0,         0.0,          0.0,         0.0,         0.0,  0.0,  0.0,
             4.0/75.0,     16.0/75.0,   0.0,          0.0,         0.0,         0.0,  0.0,  0.0,
             5.0/6.0,     -8.0/3.0,     5.0/2.0,      0.0,         0.0,         0.0,  0.0,  0.0,
            -8.0/5.0,      144.0/25.0, -4.0,          16.0/25.0,   0.0,         0.0,  0.0,  0.0,
             361.0/320.0, -18.0/5.0,    407.0/128.0, -11.0/80.0,   55.0/128.0,  0.0,  0.0,  0.0,
            -11.0/640.0,   0.0,         11.0/256.0,  -11.0/160.0,  11.0/256.0,  0.0,  0.0,  0.0,
             93.0/640.0,  -18.0/5.0,    803.0/256.0, -11.0/160.0,  99.0/256.0,  0.0,  1.0,  0.0;
        b << 31.0/384.0, 0.0, 1125.0/2816.0, 9.0/32.0, 125.0/768.0, 5.0/66.0, 0.0, 0.0;
        bhat << 7.0/1408.0, 0.0, 1125.0/2816.0, 9.0/32.0, 125.0/768.0, 0.0, 5.0/66.0, 5.0/66.0;
        c << 0.0, 1.0/6.0, 4.0/15.0, 2.0/3.0, 4.0/5.0, 1.0, 0.0, 1.0;
    }
    else if (method == Coefficients::RKF67)
    {
        // Fehlberg's 6(7)
        // Source: Fehlberg, Erwin. "Classical Fifth-, Sixth-, Seventh-, and Eighth-Order Runge-Kutta Formulas with Stepsize Control." NASA Technical Report R-287 (1968).
        // Table 8
        
        stages = 10;
        order = 6;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,             0.0,       0.0,           0.0,               0.0,             0.0,            0.0,             0.0,  0.0,  0.0,
             2.0/33.0,        0.0,       0.0,           0.0,               0.0,             0.0,            0.0,             0.0,  0.0,  0.0,
             0.0,             4.0/33.0,  0.0,           0.0,               0.0,             0.0,            0.0,             0.0,  0.0,  0.0,
             1.0/22.0,        0.0,       3.0/22.0,      0.0,               0.0,             0.0,            0.0,             0.0,  0.0,  0.0,
             43.0/64.0,       0.0,      -165.0/64.0,    77.0/32.0,         0.0,             0.0,            0.0,             0.0,  0.0,  0.0,
            -2383.0/486.0,    0.0,       1067.0/54.0,  -26312.0/1701.0,    2176.0/1701.0,   0.0,            0.0,             0.0,  0.0,  0.0,
             10077.0/4802.0,  0.0,      -5643.0/686.0,  116259.0/16807.0, -6240.0/16807.0,  1053.0/2401.0,  0.0,             0.0,  0.0,  0.0,
            -733.0/176.0,     0.0,       141.0/8.0,    -335763.0/23296.0,  216.0/77.0,     -4617.0/2816.0,  7203.0/9152.0,   0.0,  0.0,  0.0,
             15.0/352.0,      0.0,       0.0,          -5445.0/46592.0,    18.0/77.0,      -1215.0/5632.0,  1029.0/18304.0,  0.0,  0.0,  0.0,
            -1833.0/352.0,    0.0,       141.0/8.0,    -51237.0/3584.0,    18.0/7.0,       -729.0/512.0,    1029.0/1408.0,   0.0,  1.0,  0.0;

        b << 77.0/1440.0, 0.0, 0.0, 1771561.0/6289920.0, 32.0/105.0, 243.0/2560.0, 16807.0/74880.0, 11.0/270.0, 0.0, 0.0;
        bhat << 11.0/864.0, 0.0, 0.0, 1771561.0/6289920.0, 32.0/105.0, 243.0/2560.0, 16807.0/74880.0, 0.0, 11.0/270.0, 11.0/270.0;
        c << 0.0, 2.0/33.0, 4.0/33.0, 2.0/11.0, 1.0/2.0, 2.0/3.0, 6.0/7.0, 1.0, 0.0, 1.0;
    }
    else if (method == Coefficients::RKF78)
    {
        // Fehlberg's 7(8)
        // Source: Fehlberg, Erwin. "Classical Fifth-, Sixth-, Seventh-, and Eighth-Order Runge-Kutta Formulas with Stepsize Control." NASA Technical Report R-287 (1968).
        // Table 10
        
        stages = 13;
        order = 7;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,            0.0,       0.0,        0.0,          0.0,            0.0,         0.0,            0.0,        0.0,         0.0,        0.0,  0.0,  0.0,
             2.0/27.0,       0.0,       0.0,        0.0,          0.0,            0.0,         0.0,            0.0,        0.0,         0.0,        0.0,  0.0,  0.0,
             1.0/36.0,       1.0/12.0,  0.0,        0.0,          0.0,            0.0,         0.0,            0.0,        0.0,         0.0,        0.0,  0.0,  0.0,
             1.0/24.0,       0.0,       1.0/8.0,    0.0,          0.0,            0.0,         0.0,            0.0,        0.0,         0.0,        0.0,  0.0,  0.0,
             5.0/12.0,       0.0,      -25.0/16.0,  25.0/16.0,    0.0,            0.0,         0.0,            0.0,        0.0,         0.0,        0.0,  0.0,  0.0,
             1.0/20.0,       0.0,       0.0,        1.0/4.0,      1.0/5.0,        0.0,         0.0,            0.0,        0.0,         0.0,        0.0,  0.0,  0.0,
            -25.0/108.0,     0.0,       0.0,        125.0/108.0, -65.0/27.0,      125.0/54.0,  0.0,            0.0,        0.0,         0.0,        0.0,  0.0,  0.0,
             31.0/300.0,     0.0,       0.0,        0.0,          61.0/225.0,    -2.0/9.0,     13.0/900.0,     0.0,        0.0,         0.0,        0.0,  0.0,  0.0,
             2.0,            0.0,       0.0,       -53.0/6.0,     704.0/45.0,    -107.0/9.0,   67.0/90.0,      3.0,        0.0,         0.0,        0.0,  0.0,  0.0,
            -91.0/108.0,     0.0,       0.0,        23.0/108.0,  -976.0/135.0,    311.0/54.0, -19.0/60.0,      17.0/6.0,  -1.0/12.0,    0.0,        0.0,  0.0,  0.0,
             2383.0/4100.0,  0.0,       0.0,       -341.0/164.0,  4496.0/1025.0, -301.0/82.0,  2133.0/4100.0,  45.0/82.0,  45.0/164.0,  18.0/41.0,  0.0,  0.0,  0.0,
             3.0/205.0,      0.0,       0.0,        0.0,          0.0,           -6.0/41.0,   -3.0/205.0,     -3.0/41.0,   3.0/41.0,    6.0/41.0,   0.0,  0.0,  0.0,
            -1777.0/4100.0,  0.0,       0.0,       -341.0/164.0,  4496.0/1025.0, -289.0/82.0,  2193.0/4100.0,  51.0/82.0,  33.0/164.0,  12.0/41.0,  0.0,  1.0,  0.0;

        b << 41.0/840.0, 0.0, 0.0, 0.0, 0.0, 34.0/105.0, 9.0/35.0, 9.0/35.0, 9.0/280.0, 9.0/280.0, 41.0/840.0, 0.0, 0.0;
        bhat << 0.0, 0.0, 0.0, 0.0, 0.0, 34.0/105.0, 9.0/35.0, 9.0/35.0, 9.0/280.0, 9.0/280.0, 0.0, 41.0/840.0, 41.0/840.0;
        c << 0.0, 2.0/27.0, 1.0/9.0, 1.0/6.0, 5.0/12.0, 1.0/2.0, 5.0/6.0, 1.0/6.0, 2.0/3.0, 1.0/3.0, 1.0, 0.0, 1.0;
    }
    else if (method == Coefficients::RKF8)
    {
        // Fehlberg's 8(9) but without the 9
        // Source: Fehlberg, Erwin. "Classical Fifth-, Sixth-, Seventh-, and Eighth-Order Runge-Kutta Formulas with Stepsize Control." NASA Technical Report R-287 (1968).
        // Table 12
        // TODO: What are the 9th order coefficients for bhat?
        
        stages = 17;
        order = 8;
        variable = false; // TODO:

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A( 1, 0) =  0.44368940376498183109599404281370;
        A( 2, 0) =  0.16638352641186818666099776605514;
        A( 2, 1) =  0.49915057923560455998299329816541;
        A( 3, 0) =  0.24957528961780227999149664908271;
        A( 3, 2) =  0.74872586885340683997448994724812;
        A( 4, 0) =  0.20661891163400602426556710393185;
        A( 4, 2) =  0.17707880377986347040380997288319;
        A( 4, 3) = -0.68197715413869494669377076815048e-1;
        A( 5, 0) =  0.10927823152666408227903890926157;
        A( 5, 3) =  0.40215962642367995421990563690087e-2;
        A( 5, 4) =  0.39214118169078980444392330174325;
        A( 6, 0) =  0.98899281409164665304844765434355e-1;
        A( 6, 3) =  0.35138370227963966951204487356703e-2;
        A( 6, 4) =  0.12476099983160016621520625872489;
        A( 6, 5) = -0.55745546834989799643742901466348e-1;
        A( 7, 0) = -0.36806865286242203724153101080691;
        A( 7, 4) = -0.22273897469476007645024020944166e+1;
        A( 7, 5) =  0.13742908256702910729565691245744e+1;
        A( 7, 6) =  0.20497390027111603002159354092206e+1;
        A( 8, 0) =  0.45467962641347150077351950603349e-1;
        A( 8, 5) =  0.32542131701589147114677469648853;
        A( 8, 6) =  0.28476660138527908888182420573687;
        A( 8, 7) =  0.97837801675979152435868397271099e-2;
        A( 9, 0) =  0.60842071062622057051094145205182e-1;
        A( 9, 5) = -0.21184565744037007526325275251206e-1;
        A( 9, 6) =  0.19596557266170831957464490662983;
        A( 9, 7) = -0.42742640364817603675144835342899e-2;
        A( 9, 8) =  0.17434365736814911965323452558189e-1;
        A(10, 0) =  0.54059783296931917365785724111182e-1;
        A(10, 6) =  0.11029825597828926530283127648228;
        A(10, 7) = -0.12565008520072556414147763782250e-2;
        A(10, 8) =  0.36790043477581460136384043566339e-2;
        A(10, 9) = -0.57780542770972073040840628571866e-1;
        A(11, 0) =  0.12732477068667114646645181799160;
        A(11, 7) =  0.11448805006396105323658875721817;
        A(11, 8) =  0.28773020709697992776202201849198;
        A(11, 9) =  0.50945379459611363153735885079465;
        A(11,10) = -0.14799682244372575900242144449640;
        A(12, 0) = -0.36526793876616740535848544394333e-2;
        A(12, 5) =  0.81629896012318919777819421247030e-1;
        A(12, 6) = -0.38607735635693506490517694343215;
        A(12, 7) =  0.30862242924605106450474166025206e-1;
        A(12, 8) = -0.58077254528320602815829374733518e-1;
        A(12, 9) =  0.33598659328884971493143451362322;
        A(12,10) =  0.41066880401949958613549622786417;
        A(12,11) = -0.11840245972355985520633156154536e-1;
        A(13, 0) = -0.12375357921245143254979096135669e+1;
        A(13, 5) = -0.24430768551354785358734861366763e+2;
        A(13, 6) =  0.54779568932778656050436528991173;
        A(13, 7) = -0.44413863533413246374959896569346e+1;
        A(13, 8) =  0.10013104813713266094792617851022e+2;
        A(13, 9) = -0.14995773102051758447170985073142e+2;
        A(13,10) =  0.58946948523217013620824539651427e+1;
        A(13,11) =  0.17380377503428984877616857440542e+1;
        A(13,12) =  0.27512330693166730263758622860276e+2;
        A(14, 0) = -0.35260859388334522700502958875588;
        A(14, 5) = -0.18396103144848270375044198988231;
        A(14, 6) = -0.65570189449741645138006879985251;
        A(14, 7) = -0.39086144880439863435025520241310;
        A(14, 8) =  0.26794646712850022936584423271209;
        A(14, 9) = -0.10383022991382490865769858507427e+1;
        A(14,10) =  0.16672327324258671664727346168501e+1;
        A(14,11) =  0.49551925855315977067732967071441;
        A(14,12) =  0.11394001132397063228586738141784e+1;
        A(14,13) =  0.51336696424658613688199097191534e-1;
        A(15, 0) =  0.10464847340614810391873002406755e-2;
        A(15, 8) = -0.67163886844990282237778446178020e-2;
        A(15, 9) =  0.81828762189425021265330065248999e-2;
        A(15,10) = -0.42640342864483347277142138087561e-2;
        A(15,11) =  0.28009029474168936545976331153703e-3;
        A(15,12) = -0.87835333876238676639057813145633e-2;
        A(15,13) =  0.10254505110825558084217769664009e-1;
        A(16, 0) = -0.13536550786174067080442168889966e+1;
        A(16, 5) = -0.18396103144848270375044198988231;
        A(16, 6) = -0.65570189449741645138006879985251;
        A(16, 7) = -0.39086144880439863435025520241310;
        A(16, 8) =  0.27466285581299925758962207732989;
        A(16, 9) = -0.10464851753571915887035188572676e+1;
        A(16,10) =  0.16714967667123155012004488306588e+1;
        A(16,11) =  0.49523916825841808131186990740287;
        A(16,12) =  0.11481836466273301905225795954930e+1;
        A(16,13) =  0.41082191313833055603981327527525e-1;
        A(16,15) =  1.0;

        b( 0) = 0.32256083500216249913612900960247e-1;
        b( 8) = 0.25983725283715403018887023171963;
        b( 9) = 0.92847805996577027788063714302190e-1;
        b(10) = 0.16452339514764342891647731842800;
        b(11) = 0.17665951637860074367084298397547;
        b(12) = 0.23920102320352759374108933320941;
        b(13) = 0.39484274604202853746752118829325e-2;
        b(14) = 0.30726495475860640406368305522124e-1;

        // bhat?
        
        c( 1) = 0.44368940376498183109599404281370;
        c( 2) = 0.66553410564747274664399106422055;
        c( 3) = 0.99830115847120911996598659633083;
        c( 4) = 0.3155;
        c( 5) = 0.50544100948169068626516126737384;
        c( 6) = 0.17142857142857142857142857142857;
        c( 7) = 0.82857142857142857142857142857143;
        c( 8) = 0.66543966121011562534953769255586;
        c( 9) = 0.24878317968062652069722274560771;
        c(10) = 0.1090;
        c(11) = 0.8910;
        c(12) = 0.3995;
        c(13) = 0.6005;
        c(14) = 1.0;
        c(16) = 1.0;
    }
    else if (method == Coefficients::RKDP54_7M)
    {
        // Dormand and Prince's 5(4) (7-stage type M)
        // Source: Dormand, John R., and Peter J. Prince. "A family of embedded Runge-Kutta formulae." Journal of computational and applied mathematics 6.1 (1980): 19-26.
        // Table 2

        stages = 7;
        order = 5;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A << 0.0,             0.0,             0.0,             0.0,          0.0,             0.0,        0.0,
             1.0/5.0,         0.0,             0.0,             0.0,          0.0,             0.0,        0.0,
             3.0/40.0,        9.0/40.0,        0.0,             0.0,          0.0,             0.0,        0.0,
             44.0/45.0,      -56.0/15.0,       32.0/9.0,        0.0,          0.0,             0.0,        0.0,
             19372.0/6561.0, -25360.0/2187.0,  64448.0/6561.0, -212.0/729.0,  0.0,             0.0,        0.0,
             9017.0/3168.0,  -355.0/33.0,      46732.0/5247.0,  49.0/176.0,  -5103.0/18656.0,  0.0,        0.0,
             35.0/384.0,      0.0,             500.0/1113.0,    125.0/192.0, -2187.0/6784.0,   11.0/84.0,  0.0;
        b << 35.0/384.0,      0.0,             500.0/1113.0,    125.0/192.0, -2187.0/6784.0,   11.0/84.0,  0.0; // 5
        bhat << 5179.0/57600.0, 0.0, 7571.0/16695.0, 393.0/640.0, -92097.0/339200.0, 187.0/2100.0, 1.0/40.0; // 4
        c << 0.0, 1.0/5.0, 3.0/10.0, 4.0/5.0, 8.0/9.0, 1.0, 1.0;
    }
    else if (method == Coefficients::RKV65e)
    {
        // Verner's "more efficient" 6(5)
        // Source:
        //     - Verner, James Hamilton. "Explicit Runge–Kutta methods with estimates of the local truncation error." SIAM Journal on Numerical Analysis 15.4 (1978): 772-790.
        //     - Verner, James Hamilton. "Strategies for deriving new explicit Runge-Kutta pairs." Annals of Numerical Mathematics 1 (1994): 225-244.
        //     - https://www.sfu.ca/~jverner/RKV65.IIIXb.Efficient.00000144617.081204.RATOnWeb

        stages = 9;
        order = 6;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A(1,0) =  3.0/50.0;
        A(2,0) =  519479.0/27000000.0;
        A(2,1) =  2070721.0/27000000.0;
        A(3,0) =  1439.0/40000.0;
        A(3,1) =  0.0;
        A(3,2) =  4317.0/40000.0;
        A(4,0) =  109225017611.0/82828840000.0;
        A(4,1) =  0.0;
        A(4,2) = -417627820623.0/82828840000.0;
        A(4,3) =  43699198143.0/10353605000.0;
        A(5,0) = -8036815292643907349452552172369.0/191934985946683241245914401600.0;
        A(5,1) =  0.0;
        A(5,2) =  246134619571490020064824665.0/1543816496655405117602368.0;
        A(5,3) = -13880495956885686234074067279.0/113663489566254201783474344.0;
        A(5,4) =  755005057777788994734129.0/136485922925633667082436.0;
        A(6,0) = -1663299841566102097180506666498880934230261.0/30558424506156170307020957791311384232000.0;
        A(6,1) =  0.0;
        A(6,2) =  130838124195285491799043628811093033.0/631862949514135618861563657970240.0;
        A(6,3) = -3287100453856023634160618787153901962873.0/20724314915376755629135711026851409200.0;
        A(6,4) =  2771826790140332140865242520369241.0/396438716042723436917079980147600.0;
        A(6,5) = -1799166916139193/96743806114007800.0;
        A(7,0) = -832144750039369683895428386437986853923637763.0/15222974550069600748763651844667619945204887.0;
        A(7,1) =  0.0;
        A(7,2) =  818622075710363565982285196611368750.0/3936576237903728151856072395343129.0;
        A(7,3) = -9818985165491658464841194581385463434793741875.0/61642597962658994069869370923196463581866011.0;
        A(7,4) =  31796692141848558720425711042548134769375.0/4530254033500045975557858016006308628092.0;
        A(7,5) = -14064542118843830075.0/766928748264306853644.0;
        A(7,6) = -1424670304836288125.0/2782839104764768088217.0;
        A(8,0) =  382735282417.0/11129397249634.0;
        A(8,1) =  0.0;
        A(8,2) =  0.0;
        A(8,3) =  5535620703125000.0/21434089949505429.0;
        A(8,4) =  13867056347656250.0/32943296570459319.0;
        A(8,5) =  626271188750.0/142160006043.0;
        A(8,6) = -51160788125000.0/289890548217.0;
        A(8,7) =  163193540017.0/946795234.0;
        
        b(0) =  382735282417.0/11129397249634.0;
        b(1) =  0.0;
        b(2) =  0.0;
        b(3) =  5535620703125000.0/21434089949505429.0;
        b(4) =  13867056347656250.0/32943296570459319.0;
        b(5) =  626271188750.0/142160006043.0;
        b(6) = -51160788125000.0/289890548217.0;
        b(7) =  163193540017.0/946795234.0;
        b(8) =  0.0;

        bhat(0) =  273361583.0/5567482366.0;
        bhat(1) =  0.0;
        bhat(2) =  0.0;
        bhat(3) =  1964687500000.0/8727630165387.0;
        bhat(4) =  596054687500.0/1269637976277.0;
        bhat(5) =  12740367500.0/15795556227.0;
        bhat(6) =  0.0;
        bhat(7) = -4462730789736252634813752317.0/7350663039626676022821734166.0;
        bhat(8) =  441454562788983500.0/7763730504400359099.0;
        
        c(0) =  0.0;
        c(1) =  3.0/50.0;
        c(2) =  1439.0/15000.0;
        c(3) =  1439.0/10000.0;
        c(4) =  4973.0/10000.0;
        c(5) =  389.0/400.0;
        c(6) =  1999.0/2000.0;
        c(7) =  1.0;
        c(8) =  1.0;
    }
    else if (method == Coefficients::RKV65r)
    {
        // Verner's "more robust" 6(5)
        // Source:
        //     - Verner, James Hamilton. "Explicit Runge–Kutta methods with estimates of the local truncation error." SIAM Journal on Numerical Analysis 15.4 (1978): 772-790.
        //     - Verner, James Hamilton. "Strategies for deriving new explicit Runge-Kutta pairs." Annals of Numerical Mathematics 1 (1994): 225-244.
        //     - https://www.sfu.ca/~jverner/RKV65.IIIXb.Robust.00010102836.081204.RATOnWeb

        stages = 9;
        order = 6;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A(1,0) =  9.0/50.0;
        A(2,0) =  29.0/324.0;
        A(2,1) =  25.0/324.0;
        A(3,0) =  1.0/16.0;
        A(3,1) =  0.0;
        A(3,2) =  3.0/16.0;
        A(4,0) =  79129.0/250000.0;
        A(4,1) =  0.0;
        A(4,2) = -261237.0/250000.0;
        A(4,3) =  19663.0/15625.0;
        A(5,0) =  1336883.0/4909125.0;
        A(5,1) =  0.0;
        A(5,2) = -25476.0/30875.0;
        A(5,3) =  194159.0/185250.0;
        A(5,4) =  8225.0/78546.0;
        A(6,0) = -2459386.0/14727375.0;
        A(6,1) =  0.0;
        A(6,2) =  19504.0/30875.0;
        A(6,3) =  2377474.0/13615875.0;
        A(6,4) = -6157250.0/5773131.0;
        A(6,5) =  902.0/735.0;
        A(7,0) =  2699.0/7410.0;
        A(7,1) =  0.0;
        A(7,2) = -252.0/1235.0;
        A(7,3) = -1393253.0/3993990.0;
        A(7,4) =  236875.0/72618.0;
        A(7,5) = -135.0/49.0;
        A(7,6) =  15.0/22.0;
        A(8,0) =  11.0/144.0;
        A(8,1) =  0.0;
        A(8,2) =  0.0;
        A(8,3) =  256.0/693.0;
        A(8,4) =  0.0;
        A(8,5) =  125.0/504.0;
        A(8,6) =  125.0/528.0;
        A(8,7) =  5.0/72.0;
        
        b(0) =  11.0/144.0;
        b(1) =  0.0;
        b(2) =  0.0;
        b(3) =  256.0/693.0;
        b(4) =  0.0;
        b(5) =  125.0/504.0;
        b(6) =  125.0/528.0;
        b(7) =  5.0/72.0;
        b(8) =  0.0;

        bhat(0) =  28.0/477.0;
        bhat(1) =  0.0;
        bhat(2) =  0.0;
        bhat(3) =  212.0/441.0;
        bhat(4) = -312500.0/366177.0;
        bhat(5) =  2125.0/1764.0;
        bhat(6) =  0.0;
        bhat(7) = -2105.0/35532.0;
        bhat(8) =  2995.0/17766.0;
        
        c(0) =  0.0;
        c(1) =  9.0/50.0;
        c(2) =  1.0/6.0;
        c(3) =  1.0/4.0;
        c(4) =  53.0/100.0;
        c(5) =  3.0/5.0;
        c(6) =  4.0/5.0;
        c(7) =  1.0;
        c(8) =  1.0;
    }
    else if (method == Coefficients::RKV76e)
    {
        // Verner's "more efficient" 7(6)
        // Source:
        //     - Verner, James Hamilton. "Explicit Runge–Kutta methods with estimates of the local truncation error." SIAM Journal on Numerical Analysis 15.4 (1978): 772-790.
        //     - Verner, James Hamilton. "Strategies for deriving new explicit Runge-Kutta pairs." Annals of Numerical Mathematics 1 (1994): 225-244.
        //     - https://www.sfu.ca/~jverner/RKV76.IIa.Efficient.00001675585.240711.FLOAT6040OnWeb

        stages = 10;
        order = 7;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A(1,0) =  0.5e-2;
        A(2,0) = -1.076790123456790123456790123456790123457;
        A(2,1) =  1.185679012345679012345679012345679012346;
        A(3,0) =  0.4083333333333333333333333333333333333333e-1;
        A(3,1) =  0.0;
        A(3,2) =  0.1225;
        A(4,0) =  0.6389139236255726780508121615993336109954;
        A(4,1) =  0.0;
        A(4,2) = -2.455672638223656809662640566430653894211;
        A(4,3) =  2.272258714598084131611828404831320283215;
        A(5,0) = -2.661577375018757131119259297861818119279;
        A(5,1) =  0.0;
        A(5,2) =  10.80451388645613769565396655365532838482;
        A(5,3) = -8.353914657396199411968048547819291691541;
        A(5,4) =  0.8204875949566569791420417341743839209619;
        A(6,0) =  6.067741434696770992718360183877276714679;
        A(6,1) =  0.0;
        A(6,2) = -24.71127363591108579734203485290746001803;
        A(6,3) =  20.42751793078889394045773111748346612697;
        A(6,4) = -1.906157978816647150624096784352757010879;
        A(6,5) =  1.006172249242068014790040335899474187268;
        A(7,0) =  12.05467007625320299509109452892778311648;
        A(7,1) =  0.0;
        A(7,2) = -49.75478495046898932807257615331444758322;
        A(7,3) =  41.14288863860467663259698416710157354209;
        A(7,4) = -4.461760149974004185641911603484815375051;
        A(7,5) =  2.042334822239174959821717077708608543738;
        A(7,6) = -0.9834843665406107379530801693870224403537e-1;
        A(8,0) =  10.13814652288180787641845141981689030769;
        A(8,1) =  0.0;
        A(8,2) = -42.64113603171750214622846006736635730625;
        A(8,3) =  35.76384003992257007135021178023160054034;
        A(8,4) = -4.348022840392907653340370296908245943710;
        A(8,5) =  2.009862268377035895441943593011827554771;
        A(8,6) =  0.3487490460338272405953822853053145879140;
        A(8,7) = -0.2714390051048312842371587140910297407572;
        A(9,0) = -45.03007203429867712435322405073769635151;
        A(9,1) =  0.0;
        A(9,2) =  187.3272437654588840752418206154201997384;
        A(9,3) = -154.0288236935018690596728621034510402582;
        A(9,4) =  18.56465306347536233859492332958439136765;
        A(9,5) = -7.141809679295078854925420496823551192821;
        A(9,6) =  1.308808578161378625114762706007696696508;
        A(9,7) =  0.0;
        A(9,8) =  0.0;

        b(0) =  0.4715561848627222170431765108838175679569e-1;
        b(1) =  0.0;
        b(2) =  0.0;
        b(3) =  0.2575056429843415189596436101037687580986;
        b(4) =  0.2621665397741262047713863095764527711129;
        b(5) =  0.1521609265673855740323133199165117535523;
        b(6) =  0.4939969170032484246907175893227876844296;
        b(7) = -0.2943031171403250441557244744092703429139;
        b(8) =  0.8131747232495109999734599440136761892478e-1;
        b(9) =  0.0;

        bhat(0) =  0.4460860660634117628731817597479197781432e-1;
        bhat(1) =  0.0;
        bhat(2) =  0.0;
        bhat(3) =  0.2671640378571372680509102260943837899738;
        bhat(4) =  0.2201018300177293019979715776650753096323;
        bhat(5) =  0.2188431703143156830983120833512893824578;
        bhat(6) =  0.2289871705411202883378173889763552365362;
        bhat(7) =  0.0;
        bhat(8) =  0.0;
        bhat(9) =  0.2029518466335628222767054793810430358554e-1;

        c(0) =  0.0;
        c(1) =  0.5e-2;
        c(2) =  0.1088888888888888888888888888888888888889;
        c(3) =  0.1633333333333333333333333333333333333333;
        c(4) =  0.4555;
        c(5) =  0.6095094489978381317087004421486024949638;
        c(6) =  0.884;
        c(7) =  0.9250000000000000000000000000000000000000;
        c(8) =  1.0;
        c(9) =  1.0;
    }
    else if (method == Coefficients::RKV76r)
    {
        // Verner's "more robust" 7(6)
        // Source:
        //     - Verner, James Hamilton. "Explicit Runge–Kutta methods with estimates of the local truncation error." SIAM Journal on Numerical Analysis 15.4 (1978): 772-790.
        //     - Verner, James Hamilton. "Strategies for deriving new explicit Runge-Kutta pairs." Annals of Numerical Mathematics 1 (1994): 225-244.
        //     - https://www.sfu.ca/~jverner/RKV76.IIa.Robust.000027015646.240703.FLOAT6040OnWeb

        stages = 10;
        order = 7;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A(1,0) =  0.5e-2;
        A(2,0) = -1.076790123456790123456790123456790123457;
        A(2,1) =  1.185679012345679012345679012345679012346;
        A(3,0) =  0.4083333333333333333333333333333333333333e-1;
        A(3,1) =  0.0;
        A(3,2) =  0.1225;
        A(4,0) =  0.6360714285714285714285714285714285714286;
        A(4,1) =  0.0;
        A(4,2) = -2.444464285714285714285714285714285714286;
        A(4,3) =  2.263392857142857142857142857142857142857;
        A(5,0) = -2.535121107934924522925638355466021548721;
        A(5,1) =  0.0;
        A(5,2) =  10.29937465444926792043851446075602491361;
        A(5,3) = -7.951303288599057994949321745826687653648;
        A(5,4) =  0.7930114892310059220122601427111526182380;
        A(6,0) =  1.001876581252463296196919658309499980821;
        A(6,1) =  0.0;
        A(6,2) = -4.166571282442379833131393800547097145319;
        A(6,3) =  3.834343292912864241255266521825137866520;
        A(6,4) = -0.5023333356071084754746433022861176561240;
        A(6,5) =  0.6676847438841607711538509226985769541026;
        A(7,0) =  27.25501835463076713033396381917500571735;
        A(7,1) =  0.0;
        A(7,2) = -42.00461727841063835531864544390929536961;
        A(7,3) = -10.53571312661948991792108160054652610372;
        A(7,4) =  80.49553671141193714798365215892682663420;
        A(7,5) = -67.34388227179051346854907596321297564093;
        A(7,6) =  13.04865761077793746347118702956696476271;
        A(8,0) = -3.039737805711496514694365865875576322688;
        A(8,1) =  0.0;
        A(8,2) =  10.13816141032980111185794619070970015044;
        A(8,3) = -6.429305674864721572146282562955529806444;
        A(8,4) = -1.586437148340827658711531285379861057947;
        A(8,5) =  1.892178184196842441086430890913135336502;
        A(8,6) =  0.1969933540760886906129236016333644283801e-1;
        A(8,7) =  0.5441698982793323546510272424795257297790e-2;
        A(9,0) = -1.444951891677773513735100317935571236052;
        A(9,1) =  0.0;
        A(9,2) =  8.031891385995591922411703322301956043504;
        A(9,3) = -7.583174166340134682079888302367158860498;
        A(9,4) =  3.581616935319007421124768544245287869686;
        A(9,5) = -2.436972263219952941118380906569375238373;
        A(9,6) =  0.8515899999232617933968976603248614217339;
        A(9,7) =  0.0;
        A(9,9) =  0.0;

        b(0) =  0.4742583783370675608356917271757453469893e-1;
        b(1) =  0.0;
        b(2) =  0.0;
        b(3) =  0.2562236165937056265996172745827462344816;
        b(4) =  0.2695137683307420661947381725807595288676;
        b(5) =  0.1268662240909278284598913836473917324788;
        b(6) =  0.2488722594206007162204644942764749276729;
        b(7) =  0.3074483740820063133530438847909918476864e-2;
        b(8) =  0.4802380998949694330818906334714312332321e-1;
        b(9) =  0.0;

        bhat(0) =  0.4748524769929963103753127380572796155227e-1;
        bhat(1) =  0.0;
        bhat(2) =  0.0;
        bhat(3) =  0.2559941258869063329715491824590539387050;
        bhat(4) =  0.2705847808106768872253089109926813573239;
        bhat(5) =  0.1250561868442599291363882232374691792045;
        bhat(6) =  0.2520446872374386050718404382019744256218;
        bhat(7) =  0.0;
        bhat(8) =  0.0;
        bhat(9) =  0.4883497152141861455738197130309313759259e-1;

        c(0) =  0.0;
        c(1) =  0.5e-2;
        c(2) =  0.1088888888888888888888888888888888888889;
        c(3) =  0.1633333333333333333333333333333333333333;
        c(4) =  0.455;
        c(5) =  0.6059617471462913245758145021744683294809;
        c(6) =  0.835;
        c(7) =  0.915;
        c(8) =  1.0;
        c(9) =  1.0;
    }
    else if (method == Coefficients::RKV87e)
    {
        // Verner's "more efficient" 8(7)
        // Source:
        //     - Verner, James Hamilton. "Explicit Runge–Kutta methods with estimates of the local truncation error." SIAM Journal on Numerical Analysis 15.4 (1978): 772-790.
        //     - Verner, James Hamilton. "Strategies for deriving new explicit Runge-Kutta pairs." Annals of Numerical Mathematics 1 (1994): 225-244.
        //     - https://www.sfu.ca/~jverner/RKV87.IIa.Efficient.000000282866.081208.FLOAT40OnWeb (this link was dead when I tried it)
        //     - https://www.sfu.ca/~jverner/RKV87.IIa.Efficient.000000282866.081208.CoeffsOnlyFLOAT

        stages = 13;
        order = 8;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A( 1, 0) =  0.5e-1;
        A( 2, 0) = -0.69931640625e-2;
        A( 2, 1) =  0.1135556640625;
        A( 3, 0) =  0.399609375e-1;
        A( 3, 1) =  0.0;
        A( 3, 2) =  0.1198828125;
        A( 4, 0) =  0.3613975628004575124052940721184028345129;
        A( 4, 1) =  0.0;
        A( 4, 2) = -1.341524066700492771819987788202715834917;
        A( 4, 3) =  1.370126503900035259414693716084313000404;
        A( 5, 0) =  0.4904720279720279720279720279720279720280e-1;
        A( 5, 1) =  0.0;
        A( 5, 2) =  0.0;
        A( 5, 3) =  0.2350972042214404739862988335493427143122;
        A( 5, 4) =  0.1808555929813567288109039636534544884850;
        A( 6, 0) =  0.6169289044289044289044289044289044289044e-1;
        A( 6, 1) =  0.0;
        A( 6, 2) =  0.0;
        A( 6, 3) =  0.1123656831464027662262557035130015442303;
        A( 6, 4) = -0.3885046071451366767049048108111244567456e-1;
        A( 6, 5) =  0.1979188712522045855379188712522045855379e-1;
        A( 7, 0) = -1.767630240222326875735597119572145586714;
        A( 7, 1) =  0.0;
        A( 7, 2) =  0.0;
        A( 7, 3) = -62.50000000000000000000000000000000000000;
        A( 7, 4) = -6.061889377376669100821361459659331999758;
        A( 7, 5) =  5.650823198222763138561298030600840174201;
        A( 7, 6) =  65.62169641937623283799566054863063741227;
        A( 8, 0) = -1.180945066554970799825116282628297957882;
        A( 8, 1) =  0.0;
        A( 8, 2) =  0.0;
        A( 8, 3) = -41.50473441114320841606641502701994225874;
        A( 8, 4) = -4.434438319103725011225169229846100211776;
        A( 8, 5) =  4.260408188586133024812193710744693240761;
        A( 8, 6) =  43.75364022446171584987676829438379303004;
        A( 8, 7) =  0.7871425489912310687446475044226307550860e-2;
        A( 9, 0) = -1.281405999441488405459510291182054246266;
        A( 9, 1) =  0.0;
        A( 9, 2) =  0.0;
        A( 9, 3) = -45.04713996013986630220754257136007322267;
        A( 9, 4) = -4.731362069449576477311464265491282810943;
        A( 9, 5) =  4.514967016593807841185851584597240996214;
        A( 9, 6) =  47.44909557172985134869022392235929015114;
        A( 9, 7) =  0.1059228297111661135687393955516542875228e-1;
        A( 9, 8) = -0.5746842263844616254432318478286296232021e-2;
        A(10, 0) = -1.724470134262485191756709817484481861731;
        A(10, 1) =  0.0;
        A(10, 2) =  0.0;
        A(10, 3) = -60.92349008483054016518434619253765246063;
        A(10, 4) = -5.951518376222392455202832767061854868290;
        A(10, 5) =  5.556523730698456235979791650843592496839;
        A(10, 6) =  63.98301198033305336837536378635995939281;
        A(10, 7) =  0.1464202825041496159275921391759452676003e-1;
        A(10, 8) =  0.6460408772358203603621865144977650714892e-1;
        A(10, 9) = -0.7930323169008878984024452548693373291447e-1;
        A(11, 0) = -3.301622667747079016353994789790983625569;
        A(11, 1) =  0.0;
        A(11, 2) =  0.0;
        A(11, 3) = -118.0112723597525085666923303957898868510;
        A(11, 4) = -10.14142238845611248642783916034510897595;
        A(11, 5) =  9.139311332232057923544012273556827000619;
        A(11, 6) =  123.3759428284042683684847180986501894364;
        A(11, 7) =  4.623244378874580474839807625067630924792;
        A(11, 8) = -3.383277738068201923652550971536811240814;
        A(11, 9) =  4.527592100324618189451265339351129035325;
        A(11,10) = -5.828495485811622963193088019162985703755;
        A(12, 0) = -3.039515033766309030040102851821200251056;
        A(12, 1) =  0.0;
        A(12, 2) =  0.0;
        A(12, 3) = -109.2608680894176254686444192322164623352;
        A(12, 4) = -9.290642497400293449717665542656897549158;
        A(12, 5) =  8.430504981764911142134299253836167803454;
        A(12, 6) =  114.2010010378331313557424041095523427476;
        A(12, 7) = -0.9637271342145479358162375658987901652762;
        A(12, 8) = -5.034884088802189791198680336183332323118;
        A(12, 9) =  5.958130824002923177540402165388172072794;
        A(12,10) =  0.0;
        A(12,11) =  0.0;

        b( 0) =  0.4427989419007951074716746668098518862111e-1;
        b( 1) =  0.0;
        b( 2) =  0.0;
        b( 3) =  0.0;
        b( 4) =  0.0;
        b( 5) =  0.3541049391724448744815552028733568354121;
        b( 6) =  0.2479692154956437828667629415370663023884;
        b( 7) = -15.69420203883808405099207034271191213468;
        b( 8) =  25.08406496555856261343930031237186278518;
        b( 9) = -31.73836778626027646833156112007297739997;
        b(10) =  22.93828327398878395231483560344797018313;
        b(11) = -0.2361324633071542145259900641263517600737;
        b(12) =  0.0;

        bhat( 0) =  0.4431261522908979212486436510209029764893e-1;
        bhat( 1) =  0.0;
        bhat( 2) =  0.0;
        bhat( 3) =  0.0;
        bhat( 4) =  0.0;
        bhat( 5) =  0.3546095642343226447863179350895055038855;
        bhat( 6) =  0.2478480431366653069619986721504458660016;
        bhat( 7) =  4.448134732475784492725128317159648871312;
        bhat( 8) =  19.84688636611873369930932399297687935291;
        bhat( 9) = -23.58162337746561841969517960870394965085;
        bhat(10) =  0.0;
        bhat(11) =  0.0;
        bhat(12) = -0.3601679437289775162124536737746202409110;

        c( 0) = 0.0;
        c( 1) = 0.5e-1;
        c( 2) = 0.1065625;
        c( 3) = 0.15984375;
        c( 4) = 0.39;
        c( 5) = 0.465;
        c( 6) = 0.155;
        c( 7) = 0.943;
        c( 8) = 0.9018020417358569582597079406783721499560;
        c( 9) = 0.909;
        c(10) = 0.94;
        c(11) = 1.0;
        c(12) = 1.0;
    }
    else if (method == Coefficients::RKV87r)
    {
        // Verner's "more robust" 8(7)
        // Source:
        //     - Verner, James Hamilton. "Explicit Runge–Kutta methods with estimates of the local truncation error." SIAM Journal on Numerical Analysis 15.4 (1978): 772-790.
        //     - Verner, James Hamilton. "Strategies for deriving new explicit Runge-Kutta pairs." Annals of Numerical Mathematics 1 (1994): 225-244.
        //     - https://www.sfu.ca/~jverner/RKV87.IIa.Robust.00000754677.081208.FLOAT40OnWeb

        stages = 13;
        order = 8;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A( 1, 0) =  0.25;
        A( 2, 0) =  0.8740084650491523205268632759487741197705e-1;
        A( 2, 1) =  0.2548760493865432175308795062034568513581e-1;
        A( 3, 0) =  0.4233316929133858267716535433070866141732e-1;
        A( 3, 1) =  0.0;
        A( 3, 2) =  0.1269995078740157480314960629921259842520;
        A( 4, 0) =  0.4260950588874226149488144523757227409094;
        A( 4, 1) =  0.0;
        A( 4, 2) = -1.598795284659152326542773323065718111709;
        A( 4, 3) =  1.596700225771729711593958870689995370799;
        A( 5, 0) =  0.5071933729671392951509061813851363923933e-1;
        A( 5, 1) =  0.0;
        A( 5, 2) =  0.0;
        A( 5, 3) =  0.2543337726460040758275471440887777803137;
        A( 5, 4) =  0.2039468900572819946573622377727085804470;
        A( 6, 0) = -0.2900037471752311097038837928542589612409;
        A( 6, 1) =  0.0;
        A( 6, 2) =  0.0;
        A( 6, 3) =  1.344187391026078988943868110941433700318;
        A( 6, 4) = -2.864777943361442730961110382703656282947;
        A( 6, 5) =  2.677594299510594851721126064616481543870;
        A( 7, 0) =  0.9853501133799354646974040298072701428476e-1;
        A( 7, 1) =  0.0;
        A( 7, 2) =  0.0;
        A( 7, 3) =  0.0;
        A( 7, 4) =  0.2219268063075138484202403649819738790358;
        A( 7, 5) = -0.1814062291180699431269033828807395245747;
        A( 7, 6) =  0.1094441147256254823692261491803863125415e-1;
        A( 8, 0) =  0.3871105254573114467944461816516637340565;
        A( 8, 1) =  0.0;
        A( 8, 2) =  0.0;
        A( 8, 3) = -1.442445497485527757125674555307792776717;
        A( 8, 4) =  2.905398189069950931769134644923384844174;
        A( 8, 5) = -1.853771069630105929084333267581197802518;
        A( 8, 6) =  0.1400364809872815426949732510977124147922;
        A( 8, 7) =  0.5727394081149581657574677462444770648875;
        A( 9, 0) = -0.1612440344443930810063001619791348059544;
        A( 9, 1) =  0.0;
        A( 9, 2) =  0.0;
        A( 9, 3) = -0.1733960295735898408357840447396256789490;
        A( 9, 4) = -1.301289281406514740601681274517249252974;
        A( 9, 5) =  1.137950375173861730855879213143100347212;
        A( 9, 6) = -0.3174764966396688010692352113804302469898e-1;
        A( 9, 7) =  0.9335129382493366643981106448605688485659;
        A( 9, 8) = -0.8378631833473385270330085562961643320150e-1;
        A(10, 0) = -0.1919944488158953328151080465148357607314e-1;
        A(10, 1) =  0.0;
        A(10, 2) =  0.0;
        A(10, 3) =  0.2733085726526428490794232625401612427562;
        A(10, 4) = -0.6753497320694437291969161121094238085624;
        A(10, 5) =  0.3415184981384601607173848997472838271198;
        A(10, 6) = -0.6795006480337577247892051619852462939191e-1;
        A(10, 7) =  0.9659175224762387888426558649121637650975e-1;
        A(10, 8) =  0.1325308251118210118072103846654538995123;
        A(10, 9) =  0.3685495936038611344690632995153166681295;
        A(11, 0) =  0.6091877403645289867688841211158881778458;
        A(11, 1) =  0.0;
        A(11, 2) =  0.0;
        A(11, 3) = -2.272569085898001676899980093141308839972;
        A(11, 4) =  4.757898342694029006815525588191478549755;
        A(11, 5) = -5.516106706692758482429468966784424824484;
        A(11, 6) =  0.2900596369680119270909581856594617437818;
        A(11, 7) =  0.5691423963359036822910985845480184914563;
        A(11, 8) =  0.7926795760332167027133991620589332757995;
        A(11, 9) =  0.1547372045328882289412619077184989823205;
        A(11,10) =  1.614970895662181624708321510633454443497;
        A(12, 0) =  0.8873576220853471966321169405198102270488;
        A(12, 1) =  0.0;
        A(12, 2) =  0.0;
        A(12, 3) = -2.975459782108536755851363280470930158198;
        A(12, 4) =  5.600717009488163059799039254835009892383;
        A(12, 5) = -5.915607450536674468001493018994165735184;
        A(12, 6) =  0.2202968915613492701687914254080763833124;
        A(12, 7) =  0.1015509782446221666614327134090299699755;
        A(12, 8) =  1.151434564738605590978039775212585055356;
        A(12, 9) =  1.929710166527123939613436190080584365307;
        A(12,10) =  0.0;
        A(12,11) =  0.0;
        
        b( 0) =  0.4472956466669571420301584042904938246647e-1;
        b( 1) =  0.0;
        b( 2) =  0.0;
        b( 3) =  0.0;
        b( 4) =  0.0;
        b( 5) =  0.1569103352770819981336869801072664540918;
        b( 6) =  0.1846097340815163774070245187352627789204;
        b( 7) =  0.2251638060208699104247941940035072197092;
        b( 8) =  0.1479461565197023468700517988544914175374;
        b( 9) =  0.7605554244495582526979836191033649101273e-1;
        b(10) =  0.1227729023501861961082434631592143738854;
        b(11) =  0.4181195863899163158338484280087188237679e-1;
        b(12) =  0.0;
        
        bhat( 0) =  0.4584711140049592587866473012201028209588e-1;
        bhat( 1) =  0.0;
        bhat( 2) =  0.0;
        bhat( 3) =  0.0;
        bhat( 4) =  0.0;
        bhat( 5) =  0.2623189140415238743744335658484580339239;
        bhat( 6) =  0.1916937233785261190448573863568842900803;
        bhat( 7) =  0.2170917232790261833097840742290644856820;
        bhat( 8) =  0.1273818962483370679680316945065673786790;
        bhat( 9) =  0.1151053038536532625824051575004319214889;
        bhat(10) =  0.0;
        bhat(11) =  0.0;
        bhat(12) =  0.4056132779843756684182339143658360805005e-1;

        c( 0) =  0.0;
        c( 1) =  0.25;
        c( 2) =  0.1128884514435695538057742782152230971129;
        c( 3) =  0.1693326771653543307086614173228346456693;
        c( 4) =  0.424;
        c( 5) =  0.509;
        c( 6) =  0.867;
        c( 7) =  0.15;
        c( 8) =  0.7090680365138684008060140010282474786750;
        c( 9) =  0.32;
        c(10) =  0.45;
        c(11) =  1.0;
        c(12) =  1.0;
    }
    else if (method == Coefficients::RKV98e)
    {
        // Verner's "more efficient" 9(8)
        // Source:
        //     - Verner, James Hamilton. "Explicit Runge–Kutta methods with estimates of the local truncation error." SIAM Journal on Numerical Analysis 15.4 (1978): 772-790.
        //     - Verner, James Hamilton. "Strategies for deriving new explicit Runge-Kutta pairs." Annals of Numerical Mathematics 1 (1994): 225-244.
        //     - https://www.sfu.ca/~jverner/RKV98.IIa.Efficient.000000349.081209.FLOAT6040OnWeb

        stages = 16;
        order = 9;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A( 1, 0) =  0.3462e-1;
        A( 2, 0) = -0.389335438857287327017042687229284478532e-1;
        A( 2, 1) =  0.1359578945245091786499878854939346230295;
        A( 3, 0) =  0.3638413148954266723060635628912731569111e-1;
        A( 3, 1) =  0.0;
        A( 3, 2) =  0.1091523944686280016918190688673819470733;
        A( 4, 0) =  2.025763914393969636805657604282571047511;
        A( 4, 1) =  0.0;
        A( 4, 2) = -7.638023836496292020387602153091964592952;
        A( 4, 3) =  6.173259922102322383581944548809393545442;
        A( 5, 0) =  0.5112275589406060872792270881648288397197e-1;
        A( 5, 1) =  0.0;
        A( 5, 2) =  0.0;
        A( 5, 3) =  0.1770823794555021537929910813839068684087;
        A( 5, 4) =  0.80277624092225014536138698108025283759e-3;
        A( 6, 0) =  0.1316006357975216279279871693164256985334;
        A( 6, 1) =  0.0;
        A( 6, 2) =  0.0;
        A( 6, 3) = -0.2957276252669636417685183174672273730699;
        A( 6, 4) =  0.878137803564295237421124704053886667082e-1;
        A( 6, 5) =  0.6213052975225274774321435005639430026100;
        A( 7, 0) =  0.7166666666666666666666666666666666666667e-1;
        A( 7, 1) =  0.0;
        A( 7, 2) =  0.0;
        A( 7, 3) =  0.0;
        A( 7, 4) =  0.0;
        A( 7, 5) =  0.3305533578915319409260346730051472207728;
        A( 7, 6) =  0.2427799754418013924072986603281861125606;
        A( 8, 0) =  0.71806640625e-1;
        A( 8, 1) =  0.0;
        A( 8, 2) =  0.0;
        A( 8, 3) =  0.0;
        A( 8, 4) =  0.0;
        A( 8, 5) =  0.3294380283228177160744825466257672816401;
        A( 8, 6) =  0.1165190029271822839255174533742327183599;
        A( 8, 7) = -0.34013671875e-1;
        A( 9, 0) =  0.4836757646340646986611287718844085773549e-1;
        A( 9, 1) =  0.0;
        A( 9, 2) =  0.0;
        A( 9, 3) =  0.0;
        A( 9, 4) =  0.0;
        A( 9, 5) =  0.3928989925676163974333190042057047002852e-1;
        A( 9, 6) =  0.1054740945890344608263649267140088017604;
        A( 9, 7) = -0.2143865284648312665982642293830533996214e-1;
        A( 9, 8) = -0.1041229174627194437759832813847147895623;
        A(10, 0) = -0.2664561487201478635337289243849737340534e-1;
        A(10, 1) =  0.0;
        A(10, 2) =  0.0;
        A(10, 3) =  0.0;
        A(10, 4) =  0.0;
        A(10, 5) =  0.3333333333333333333333333333333333333333e-1;
        A(10, 6) = -0.1631072244872467239162704487554706387141;
        A(10, 7) =  0.3396081684127761199487954930015522928244e-1;
        A(10, 8) =  0.1572319413814626097110769806810024118077;
        A(10, 9) =  0.2152267478031879552303534778794770376960;
        A(11, 0) =  0.3689009248708622334786359863227633989718e-1;
        A(11, 1) =  0.0;
        A(11, 2) =  0.0;
        A(11, 3) =  0.0;
        A(11, 4) =  0.0;
        A(11, 5) = -0.1465181576725542928653609891758501156785;
        A(11, 6) =  0.2242577768172024345345469822625833796001;
        A(11, 7) =  0.2294405717066072637090897902753790803034e-1;
        A(11, 8) = -0.35850052905728761357394424889330334334e-2;
        A(11, 9) =  0.8669223316444385506869203619044453906053e-1;
        A(11,10) =  0.4383840651968337846196219974168630120572;
        A(12, 0) = -0.4866012215113340846662212357570395295088;
        A(12, 1) =  0.0;
        A(12, 2) =  0.0;
        A(12, 3) =  0.0;
        A(12, 4) =  0.0;
        A(12, 5) = -6.304602650282852990657772792012007122988;
        A(12, 6) = -.281245618289472564778284183790118418111;
        A(12, 7) = -2.679019236219849057687906597489223155566;
        A(12, 8) =  0.518815663924157511565311164615012522024;
        A(12, 9) =  1.365353187603341710683633635235238678626;
        A(12,10) =  5.885091088503946585721274891680604830712;
        A(12,11) =  2.802808786272062889819965117517532194812;
        A(13, 0) =  0.4185367457753471441471025246471931649633;
        A(13, 1) =  0.0;
        A(13, 2) =  0.0;
        A(13, 3) =  0.0;
        A(13, 4) =  0.0;
        A(13, 5) =  6.724547581906459363100870806514855026676;
        A(13, 6) = -0.425444280164611790606983409697113064616;
        A(13, 7) =  3.343279153001265577811816947557982637749;
        A(13, 8) =  0.617081663117537759528421117507709784737;
        A(13, 9) = -0.929966123939932833937749523988800852013;
        A(13,10) = -6.099948804751010722472962837945508844846;
        A(13,11) = -3.002206187889399044804158084895173690015;
        A(13,12) =  0.2553202529443445472336424602988558373637;
        A(14, 0) = -0.779374086122884664644623040843840506343;
        A(14, 1) =  0.0;
        A(14, 2) =  0.0;
        A(14, 3) =  0.0;
        A(14, 4) =  0.0;
        A(14, 5) = -13.93734253810777678786523664804936051203;
        A(14, 6) =  1.252048853379357320949735183924200895136;
        A(14, 7) = -14.69150040801686878191527989293072091588;
        A(14, 8) = -0.494705058533141685655191992136962873577;
        A(14, 9) =  2.242974909146236657906984549543692874755;
        A(14,10) =  13.36789380382864375813864978592679139881;
        A(14,11) =  14.39665048665068644512236935340272139005;
        A(14,12) = -0.7975813331776800379127866056663258667437;
        A(14,13) =  0.4409353709534277758753793068298041158235;
        A(15, 0) =  2.058051337466886442151242368989994043993;
        A(15, 1) =  0.0;
        A(15, 2) =  0.0;
        A(15, 3) =  0.0;
        A(15, 4) =  0.0;
        A(15, 5) =  22.35793772796803295519317565842520212899;
        A(15, 6) =  0.90949810997556332745009198137971890783;
        A(15, 7) =  35.89110098240264104710550686568482456493;
        A(15, 8) = -3.442515027624453437985000403608480262211;
        A(15, 9) = -4.865481358036368826566013387928704014496;
        A(15,10) = -18.90980381354342625688427480879773032857;
        A(15,11) = -34.26354448030451782929251177395134170515;
        A(15,12) =  1.264756521695642578827783499806516664686;
        A(15,13) =  0.0;
        A(15,14) =  0.0;

        b( 0) =  0.1461197685842315252051541915018784713459e-1;
        b( 1) =  0.0;
        b( 2) =  0.0;
        b( 3) =  0.0;
        b( 4) =  0.0;
        b( 5) =  0.0;
        b( 6) =  0.0;
        b( 7) = -0.3915211862331339089410228267288242030810;
        b( 8) =  0.2310932500289506415909675644868993669908;
        b( 9) =  0.1274766769992852382560589467488989175618;
        b(10) =  0.2246434176204157731566981937082069688984;
        b(11) =  0.5684352689748512932705226972873692126743;
        b(12) =  0.5825871557215827200814768021863420902155e-1;
        b(13) =  0.1364317403482215641609022744494239843327;
        b(14) =  0.3057013983082797397721005067920369646664e-1;
        b(15) =  0.0;

        bhat( 0) =  0.1996996514886773085518508418098868756464e-1;
        bhat( 1) =  0.0;
        bhat( 2) =  0.0;
        bhat( 3) =  0.0;
        bhat( 4) =  0.0;
        bhat( 5) =  0.0;
        bhat( 6) =  0.0;
        bhat( 7) =  2.191499304949330054530747099310837524864;
        bhat( 8) =  0.8857071848208438030833722031786358862953e-1;
        bhat( 9) =  0.1140560234865965622484956605091432032674;
        bhat(10) =  0.2533163805345107065564577734569651977347;
        bhat(11) = -2.056564386240941011158999594595981300493;
        bhat(12) =  0.3408096799013119935160094894224543812830;
        bhat(13) =  0.0;
        bhat(14) =  0.0;
        bhat(15) =  0.4834231373823958314376726739772871714902e-1;

        c( 0) = 0.0;
        c( 1) = 0.3462e-1;
        c( 2) = 0.9702435063878044594828361677100617517633e-1;
        c( 3) = 0.1455365259581706689224254251565092627645;
        c( 4) = 0.561;
        c( 5) = 0.2290079115904850126662751771814700052182;
        c( 6) = 0.5449920884095149873337248228185299947818;
        c( 7) = 0.645;
        c( 8) = 0.48375;
        c( 9) = 0.6757e-1;
        c(10) = 0.25;
        c(11) = 0.6590650618730998549405331618649220295334;
        c(12) = 0.8206;
        c(13) = 0.9012;
        c(14) = 1.0;
        c(15) = 1.0;
    }
    else if (method == Coefficients::RKV98r)
    {
        // Verner's "more robust" 9(8)
        // Source:
        //     - Verner, James Hamilton. "Explicit Runge–Kutta methods with estimates of the local truncation error." SIAM Journal on Numerical Analysis 15.4 (1978): 772-790.
        //     - Verner, James Hamilton. "Strategies for deriving new explicit Runge-Kutta pairs." Annals of Numerical Mathematics 1 (1994): 225-244.
        //     - https://www.sfu.ca/~jverner/RKV98.IIa.Robust.000000351.081209.FLOAT6040OnWeb

        stages = 16;
        order = 9;
        variable = true;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A( 1, 0) =  0.4e-1;
        A( 2, 0) = -0.198852731918229097650241511466089129345e-1;
        A( 2, 1) =  0.1163726333296965222173745449432724803716;
        A( 3, 0) =  0.3618276005170260466963139767374883778890e-1;
        A( 3, 1) =  0.0;
        A( 3, 2) =  0.1085482801551078140088941930212465133667;
        A( 4, 0) =  2.272114264290177409193144938921415409241;
        A( 4, 1) =  0.0;
        A( 4, 2) = -8.526886447976398578316416192982602292786;
        A( 4, 3) =  6.830772183686221169123271254061186883545;
        A( 5, 0) =  0.5094385535389374394512668566783434123978e-1;
        A( 5, 1) =  0.0;
        A( 5, 2) =  0.0;
        A( 5, 3) =  0.1755865049809071110203693328749561646990;
        A( 5, 4) =  0.70229612707574674987780067603244497535e-3;
        A( 6, 0) =  0.1424783668683284782770955365543878809824;
        A( 6, 1) =  0.0;
        A( 6, 2) =  0.0;
        A( 6, 3) = -0.3541799434668684104094753917518523845155;
        A( 6, 4) =  0.7595315450295100889001534202778550159932e-1;
        A( 6, 5) =  0.6765157656337123215269906939508560510196;
        A( 7, 0) =  0.7111111111111111111111111111111111111111e-1;
        A( 7, 1) =  0.0;
        A( 7, 2) =  0.0;
        A( 7, 3) =  0.0;
        A( 7, 4) =  0.0;
        A( 7, 5) =  0.3279909287605898328568406057725491803016;
        A( 7, 6) =  0.2408979601282990560320482831163397085872;
        A( 8, 0) =  0.7125e-1;
        A( 8, 1) =  0.0;
        A( 8, 2) =  0.0;
        A( 8, 3) =  0.0;
        A( 8, 4) =  0.0;
        A( 8, 5) =  0.3268842451575245554847578757216915662785;
        A( 8, 6) =  0.1156157548424754445152421242783084337215;
        A( 8, 7) = -0.3375e-1;
        A( 9, 0) =  0.4822677322465810178387112087673611111111e-1;
        A( 9, 1) =  0.0;
        A( 9, 2) =  0.0;
        A( 9, 3) =  0.0;
        A( 9, 4) =  0.0;
        A( 9, 5) =  0.3948559980495400110769549704186108167677e-1;
        A( 9, 6) =  0.1058851161934658144373823566907778072121;
        A( 9, 7) = -0.2152006320474309346664428710937500000000e-1;
        A( 9, 8) = -0.1045374260183348238623046875;
        A(10, 0) = -0.2609113435754923412210928689962011065179e-1;
        A(10, 1) =  0.0;
        A(10, 2) =  0.0;
        A(10, 3) =  0.0;
        A(10, 4) =  0.0;
        A(10, 5) =  0.3333333333333333333333333333333333333333e-1;
        A(10, 6) = -0.1652504006638105086724681598195267241410;
        A(10, 7) =  0.3434664118368616658319419895678838776647e-1;
        A(10, 8) =  0.1595758283215209043195814910843067811951;
        A(10, 9) =  0.2140857321828193385584684233447183324979;
        A(11, 0) = -0.362842339625565859076509979091267105528e-1;
        A(11, 1) =  0.0;
        A(11, 2) =  0.0;
        A(11, 3) =  0.0;
        A(11, 4) =  0.0;
        A(11, 5) = -1.096167597427208807028761474420297770752;
        A(11, 6) =  0.1826035504321331052308236240517254331348;
        A(11, 7) =  0.708225444417068325613028685455625123741e-1;
        A(11, 8) = -0.231364701848243126999929738482630407146e-1;
        A(11, 9) =  0.2711204726320932916455631550463654973432;
        A(11,10) =  1.308133749422980744437146904349994472286;
        A(12, 0) = -0.5074635056416974879347823927726392374259;
        A(12, 1) =  0.0;
        A(12, 2) =  0.0;
        A(12, 3) =  0.0;
        A(12, 4) =  0.0;
        A(12, 5) = -6.631342198657237090355284142048733580937;
        A(12, 6) = -0.252748010090880105270020973014860316405;
        A(12, 7) = -0.4952612380036095562991116175550167835424;
        A(12, 8) =  0.293252554525388690285739720360003594753;
        A(12, 9) =  1.440108693768280908474851998204423941413;
        A(12,10) =  6.237934498647055877243623886838802127716;
        A(12,11) =  0.7270192054526987638549835199880202544289;
        A(13, 0) =  0.6130118256955931701496387847232542148725;
        A(13, 1) =  0.0;
        A(13, 2) =  0.0;
        A(13, 3) =  0.0;
        A(13, 4) =  0.0;
        A(13, 5) =  9.088803891640463313341034206647776279557;
        A(13, 6) = -0.407378815629344868103315381138325162923;
        A(13, 7) =  1.790733389490374687043894756399015035977;
        A(13, 8) =  0.714927166761755073724875250629602731782;
        A(13, 9) = -1.438580857841722850237810322456327208949;
        A(13,10) = -8.263329312064740580595954649844133476994;
        A(13,11) = -1.537570570808865115231450725068826856201;
        A(13,12) =  0.3453832827564871699090880801079644428793;
        A(14, 0) = -1.211697910343873872490625222495537087293;
        A(14, 1) =  0.0;
        A(14, 2) =  0.0;
        A(14, 3) =  0.0;
        A(14, 4) =  0.0;
        A(14, 5) = -19.05581871559595277753334676575234493500;
        A(14, 6) =  1.26306067538987510135943101851905310045;
        A(14, 7) = -6.913916969178458046793476128409110926069;
        A(14, 8) = -0.676462266509498065300115641383621209887;
        A(14, 9) =  3.367860445026607887090352785684064242560;
        A(14,10) =  18.00675164312590810020103216906571965203;
        A(14,11) =  6.838828926794279896350389904990814350968;
        A(14,12) = -1.031516451921950498420447675652291096155;
        A(14,13) =  0.4129106232130622755368055554332539084021;
        A(15, 0) =  2.157389007494053627033175177985666660692;
        A(15, 1) =  0.0;
        A(15, 2) =  0.0;
        A(15, 3) =  0.0;
        A(15, 4) =  0.0;
        A(15, 5) =  23.80712219809580523172312179815279712750;
        A(15, 6) =  0.88627792492165554903036801415266308369;
        A(15, 7) =  13.13913039759876381480201677314222971522;
        A(15, 8) = -2.604415709287714883747369630937415176632;
        A(15, 9) = -5.193859949783872300189266203049579105962;
        A(15,10) = -20.41234071154150778768154893536134356354;
        A(15,11) = -12.30085625250572261314889445241581039623;
        A(15,12) =  1.521553095008539362178397458330791655267;
        A(15,13) =  0.0;
        A(15,14) =  0.0;

        b( 0) =  0.1458885278405539719101539582255752917034e-1;
        b( 1) =  0.0;
        b( 2) =  0.0;
        b( 3) =  0.0;
        b( 4) =  0.0;
        b( 5) =  0.0;
        b( 6) =  0.0;
        b( 7) =  0.2024197887889332650566666683195656097825e-2;
        b( 8) =  0.2178047084569716646796256135839225745895;
        b( 9) =  0.1274895340854389692868677968654808668201;
        b(10) =  0.2244617745463131861258531547137348031621;
        b(11) =  0.1787254491259903095100090833796054447157;
        b(12) =  0.7594344758096557172908303416513173076283e-1;
        b(13) =  0.1294845879197561516869001434704642286297;
        b(14) =  0.2947744761261941714007911131590716605202e-1;
        b(15) =  0.0;

        bhat( 0) =  0.2034666655224434599707885098832906986649e-1;
        bhat( 1) =  0.0;
        bhat( 2) =  0.0;
        bhat( 3) =  0.0;
        bhat( 4) =  0.0;
        bhat( 5) =  0.0;
        bhat( 6) =  0.0;
        bhat( 7) =  1.069617650982700109541321983413338230042;
        bhat( 8) =  0.7680834711303187278673130261850350530338e-1;
        bhat( 9) =  0.1130778186885240437498706751119241126785;
        bhat(10) =  0.2552587357981962194892445789565762186511;
        bhat(11) = -0.9825898086919164036191607912120918904022;
        bhat(12) =  0.3981545824421514217762002137442675068982;
        bhat(13) =  0.0;
        bhat(14) =  0.0;
        bhat(15) =  0.4932600711506839027871318637915324696208e-1;

        c( 0) =  0.0;
        c( 1) =  0.4e-1;
        c( 2) =  0.9648736013787361245235039379666356743708e-1;
        c( 3) =  0.1447310402068104186785255906949953511556;
        c( 4) =  0.576;
        c( 5) =  0.2272326564618766017153738192188229509142;
        c( 6) =  0.5407673435381233982846261807811770490858;
        c( 7) =  0.64;
        c( 8) =  0.48;
        c( 9) =  0.6754e-1;
        c(10) =  0.25;
        c(11) =  0.6770920153543242682384311058159603931192;
        c(12) =  0.8115;
        c(13) =  0.906;
        c(14) =  1.0;
        c(15) =  1.0;
    }
    else if (method == Coefficients::CG4a)
    {
        // Jackiewicz, Marthinsen, and Owren's Order 4 CG Method
        // Source: Jackiewicz, Zdzislaw, Arne Marthinsen, and Brynjulf Owren. "Construction of Runge–Kutta methods of Crouch–Grossman type of high order." Advances in Computational Mathematics 13 (2000): 405-415.
        // Appendix A Example 1

        stages = 5;
        order = 4;
        variable = false;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A(1,0) =  0.8177227988124852;
        A(2,0) =  0.3199876375476427;
        A(2,1) =  0.0659864263556022;
        A(3,0) =  0.9214417194464946;
        A(3,1) =  0.4997857776773573;
        A(3,2) = -1.0969984448371582;
        A(4,0) =  0.3552358559023322;
        A(4,1) =  0.2390958372307326;
        A(4,2) =  1.3918565724203246;
        A(4,3) = -1.1092979392113465;

        b(1) =  0.1370831520630755;
        b(2) = -0.0183698531564020;
        b(3) =  0.7397813985370780;
        b(4) = -0.1907142565505889;
        b(5) =  0.3322195591068374;

        c(1) =  0.0;
        c(2) =  0.8177227988124852;
        c(3) =  0.3859740639032449;
        c(4) =  0.3242290522866937;
        c(5) =  0.8768903263420429;
    }
    else if (method == Coefficients::CG5a)
    {
        // Jackiewicz, Marthinsen, and Owren's Order 5 CG Method
        // Source: Jackiewicz, Zdzislaw, Arne Marthinsen, and Brynjulf Owren. "Construction of Runge–Kutta methods of Crouch–Grossman type of high order." Advances in Computational Mathematics 13 (2000): 405-415.
        // Appendix A Example 2

        stages = 9;
        order = 5;
        variable = false;

        A = Eigen::MatrixXd::Zero(stages, stages);
        b = Eigen::VectorXd::Zero(stages);
        bhat = Eigen::VectorXd::Zero(stages);
        c = Eigen::VectorXd::Zero(stages);

        A(1,0) =  0.5119828014137712;
        A(2,0) =  0.1256672120643583;
        A(2,1) =  0.7516202380829815;
        A(3,0) = -0.1859318985660963;
        A(3,1) =  0.9805295406563367;
        A(3,2) = -0.5333302514616872;
        A(4,0) =  0.1693767277911736;
        A(4,1) =  0.9505578305836004;
        A(4,2) = -0.2601241719456298;
        A(4,3) = -0.2298819100175240;
        A(5,0) = -0.3672779810475256;
        A(5,1) = -0.0086029950554851;
        A(5,2) = -0.0010336337263253;
        A(5,3) =  0.4747844514543335;
        A(5,4) = -0.1827675787966842;
        A(6,0) = -0.1967584902954152;
        A(6,1) = -0.0841805485664162;
        A(6,2) = -0.0269530236366960;
        A(6,3) =  0.7559747536983863;
        A(6,4) = -0.0238706198984107;
        A(6,5) =  0.0482925299135956;
        A(7,0) = -0.5309452158934434;
        A(7,1) =  0.0197456651284920;
        A(7,2) = -0.0890782597312347;
        A(7,3) =  1.1112114193183167;
        A(7,4) = -0.2549231869664070;
        A(7,5) =  0.0690881269948897;
        A(7,6) = -0.0190658555145840;
        A(8,0) =  0.0;
        A(8,1) = -0.1116041993954347;
        A(8,2) =  0.0007837329078394;
        A(8,3) =  0.1273989332794543;
        A(8,4) = -0.2951798037735399;
        A(8,5) = -0.5806798044068681;
        A(8,6) = -0.3715982236980106;
        A(8,7) =  1.1170906343009428;

        b(0) =  0.7927513978455029;
        b(1) =  0.0;
        b(2) =  0.3490698579749237;
        b(3) =  0.3139686995007973;
        b(4) = -0.4266876632081064;
        b(5) = -0.8094238190622946;
        b(6) =  1.3450516465346317;
        b(7) = -0.9242094915998407;
        b(8) =  0.3594793720143862;

        c(0) =  0.0;
        c(1) =  0.5119828014137712;
        c(2) =  0.8772874501473397;
        c(3) =  0.2612673906285532;
        c(4) =  0.6299284764116202;
        c(5) = -0.0848977371716866;
        c(6) =  0.4725046012150439;
        c(7) =  0.3060326933360294;
        c(8) = -0.1137887307856168;
    }
    

    // TODO: 
    // CG 3 and lower should be in CG original paper. 3 stage method in Runge–Kutta methods adapted to manifolds and based on rigid frames
    // CG43: Runge–Kutta methods adapted to manifolds and based on rigid frames

    // CG6a (derived but not explicitely stated): Jackiewicz, Zdzislaw, Arne Marthinsen, and Brynjulf Owren. "Construction of Runge–Kutta methods of Crouch–Grossman type of high order." Advances in Computational Mathematics 13 (2000): 405-415.



    // Postprocessing
    const Eigen::VectorXd e = bhat - b;

    // Final checks
    assert(A.rows() == stages);
    assert(A.cols() == stages);
    assert(b.size() == stages);
    assert(bhat.size() == stages);
    assert(c.size() == stages);

    return {A, b, bhat, c, e, order, stages, variable};
}

}
